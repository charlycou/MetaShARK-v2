try(template_table_attributes(
path = paste0(path, "/", dp, "/metadata_templates"),
data.path = paste0(path, "/", dp, "/data_objects"),
data.table = rv$data_files$name
))
grepl("paste0(\"Cannot detect field delimiter for \", x,", tt)
grepl("paste0\(\"Cannot detect field delimiter for \", x,", tt)
grepl("paste0\\(\"Cannot detect field delimiter for \", x,", tt)
devtools::install_github("earnaud/MetaShARK-v2")
MetaShARK::runMetashark()
MetaShARK::runMetashark()
unload("MetaShARK")
devtools::unload("MetaShARK")
remove.packages(MetaShARK)
remove.packages("MetaShARK")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$templateDP$custom_units
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
disable("nav-nextTab")
enable(ns("nav-nextTab"))
enable("nav-nextTab")
disable("nav-nextTab")
rv$CU_Table
shinyjs::toggleState("nav-nextTab")
shinyjs::toggleState("nav-nextTab")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$step
globals$EMLAL$NAVIGATE
globals$EMLAL$MAX
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
?updateTabItems
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
rv$CU_Table
unlist(rv$CU_Table)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$CU_Table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$CU_Table
rv$complete()
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
isTruthy(unlist(rv$CU_Table))
sapply(unlist(rv$CU_Table), isTruthy)
all(sapply(unlist(rv$CU_Table), isTruthy))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$templateDP$custom_units
globals$EMLAL$HISTORY
globals$EMLAL$HISTORY
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$step
sapply(savevar$emlal$templateDP, print)
dir("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test/metadata_templates/")
dir("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test")
dir("~/dataPackagesOutput/emlAssemblyLine/test_emldp/")
savevar$emlal$templateDP$Tab_Hauls.csv
savevar$emlal$templateDP$Tab_Hauls.csv
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
a = initReactive()
isTruthy(a$emlal$templateDP)
isTruthy({a$emlal$templateDP})
observe({isTruthy(a$emlal$templateDP)})
observe({print(isTruthy(a$emlal$templateDP))})
isolate({print(isTruthy(a$emlal$templateDP))})
isolate({a$emlal$templateDP})
isolate({a$emlal$templateDP()})
isolate({a$emlal$templateDP})
isolate({reactiveValuesToList(a$emlal$templateDP) })
isTruthy(isolate({reactiveValuesToList(a$emlal$templateDP) }))
isTruthy(unlist(isolate({reactiveValuesToList(a$emlal$templateDP) })))
unlist(reactiveValuesToList( isolate(a$emlal$templateDP) ))
isolate(unlist(reactiveValuesToList(a$emlal$templateDP) ))
isolate(
unlist(
reactiveValuesToList(
a$emlal$templateDP
)
)
)
isTruthy(
isolate(
unlist(
reactiveValuesToList(
a$emlal$templateDP
)
)
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
66990000*3689.52
conso2015 <- 66990000*3.68952
conso2015
2.87448179035E+15
conso2015toe <- 2.87448179035E+15
conso2015wh <- 2.87448179035E+15
conso2015toe <- conso2015
rm(conso2015)
print(ls(conso))
print(ls("conso*"))
c(conso2015toe, conso2015wh)
conso2015 <- c(conso2015toe, conso2015wh)
prod2015wh = 5.46e+14
prod2015toe = 46947549.441101
prod2015 <- c(prod2015toe, prod2015wh)
prod2015 - conso2015
rm(list=ls())
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
"custom" %in% savevar$emlal$templateDP[["Nitrogen_fixation.csv"]][, "unit"]
savevar$emlal$templateDP[["Nitrogen_fixation.csv"]][, "unit"]
rv$current_file
rv$attributesTable
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$templateDP[[rv$current_file]]
savevar$emlal$templateDP[[rv$current_file]]
310-34
376/2
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
typeof(rv$CU_Table)
rv$CU_Table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
disable("attribute_prev")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
CU_Table <- fread(paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
CU_Table <- fread(paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$CU_Table
isTruthy(rv$CU_Table)
isTruthy(unlist(rv$CU_Table))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
art
unlist(art)
req(1)
req(50)
req(art)
req(exists("art"))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
isTruthy(data.frame())
isTruthy(unlist(data.frame()))
isTruthy(unlist(data.frame(1)))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
rv$CU_Table
fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
rv <- reactiveValues(
current_index = integer(),
attributes = reactiveValues(),
attributesNames = c(),
attributesFiles = c(),
complete = logical(),
CU_Table = data.frame()
)
observe({
req(
isolate(
unlist(
reactiveValuesToList(
savevar$emlal$templateDP
)
)
)
) # app has been to previous step
disable("nav-nextTab")
rv$CU_Table <- fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
})
observeEvent(rv$CU_Table, {
req(rv$CU_Table)
if (any(dim(rv$CU_Table) == 0)) {
sapply(names(savevar$emlal$templateDP), function(file_name) {
tmp <- savevar$emlal$templateDP[[file_name]]
# browser()
if (any(tmp$unit == "custom")) {
rv$attributesNames <- c(
rv$attributesNames,
tmp$attributeName[tmp$unit == "custom"]
)
rv$attributesFiles <- c(
rv$attributesFiles,
rep(file_name, length(tmp$attributeName[tmp$unit == "custom"]))
)
}
})
}
})
observeEvent(rv$attributesNames, {
isolate({
sapply(
1:length(rv$attributesNames),
function(i) {
rv$CU_Table[i, ] <- rep("", ncol(rv$CU_Table))
}
)
})
rv$current_index <- 1
output$attributeFile <- renderText({ paste("In", rv$attributesFiles[1]) })
})
observeEvent(rv$current_index, {
rv$current_attribute <- rv$attributesNames[rv$current_index]
output$attributeFile <- renderText({ paste("In", rv$attributesFiles[rv$current_index]) })
# enable/disable units navigation button
if(rv$current_index == 1){
disable("attribute_prev")
}
else{
enable("attribute_prev")
}
if(rv$current_index == length(rv$attributesNames)){
disable("attribute_next")
}
else{
enable("attribute_next")
}
})
observeEvent(rv$CU_Table, {
req(rv$CU_Table)
rv$ui <- colnames(rv$CU_Table)
savevar$emlal$templateDP$custom_units <- rv$CU_Table
})
# Attribute selection
observeEvent(input$attribute_prev, {
req(rv$attributesNames)
if (rv$current_index > 1) {
rv$current_index <- rv$current_index - 1
}
})
observeEvent(input$attribute_next, {
req(rv$attributesNames)
if (rv$current_index < length(rv$attributesNames)) {
rv$current_index <- rv$current_index + 1
}
})
output$current_attribute <- renderUI({
div(rv$current_attribute,
style = paste0(
"display: inline-block;
font-size:15pt;
text-align:center;
width:70%;
background: linear-gradient(90deg, #3c8dbc ",
round(100 * rv$current_index / length(rv$attributesNames)),
"%, white ",
round(100 * rv$current_index / length(rv$attributesNames)),
"%);"
)
)
})
# NSB
callModule(
onQuit, "nav",
# additional arguments
globals, savevar,
savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name
)
callModule(
onSave, "nav",
# additional arguments
savevar,
savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name
)
callModule(
nextTab, "nav",
globals, "customUnits"
)
callModule(
prevTab, "nav",
globals
)
# Procedurals ----
# / UI ----
# Warning: Error in choicesWithNames: argument "choices" is missing, with no default
output$edit_CU <- renderUI({
req(rv$ui)
# actions
tagList(
# write each attribute's characteristic
lapply(rv$ui, function(colname) {
# prepare var
saved_value <- rv$CU_Table[rv$current_index, colname]
cat("Saved:", saved_value, "for", colname, "\n")
# UI
switch(colname,
id = textInput(ns(colname),
label = colname,
placeholder = "e.g. milligramsPerGram",
value = saved_value
),
unitType = textInput(ns(colname),
label = colname,
placeholder = "e.g. mass",
value = saved_value
),
parentSI = selectInput(ns(colname),
label = colname,
choices = globals$FORMAT$UNIT[-1],
selected = saved_value
),
multiplierToSI = numericInput(ns(colname),
label = colname,
value = 1
),
description = textAreaInput(ns(colname),
label = colname,
placeholder = "e.g. milligrams per gram",
value = saved_value
)
) # end of switch
}) # end of lapply colname
) # end of tagList
}) # end of UI
# / Servers ----
observe({
req(any(rv$ui %in% names(input)))
sapply(names(rv$CU_Table), function(rvName) {
rv$attributes[[rvName]] <- eventReactive(input[[rvName]], {
# get input value
enter <- input[[rvName]]
# check obtained value
if (is.list(enter)) {
enter <- unlist(enter)
}
return(enter)
}, ignoreNULL = FALSE) # end eventReactive
}) # end sapply
}) # end observe
# Saves ----
observeEvent({
input$id
input$unitType
input$parentSI
input$multiplierToSI
input$description
},
{
req(
!is.null(unlist(reactiveValuesToList(rv$attributes))),
rv$CU_Table
)
# save metadata
rv$CU_Table[rv$current_index, ] <- printReactiveValues(
rv$attributes
)[names(rv$CU_Table)]
})
rv$complete <- reactive({
req(rv$CU_Table)
all(sapply(unlist(rv$CU_Table), isTruthy))
})
observeEvent(rv$CU_Table, {
req(rv$complete)
if (rv$complete()) {
enable("nav-nextTab")
output$warning_completeness <- renderText(NULL)
} else {
disable("nav-nextTab")
output$warning_completeness <- renderText("All fields must be filled.")
}
})
# Process data ----
observeEvent(input[["nav-nextTab"]],{
fwrite(rv$CU_Table,
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
)
)
browser()
}, priority = 1)
observeEvent(input[["nav-prevTab"]],{
}, priority = 1)
# Output ----
return(savevar)
Q
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
any(dim(rv$CU_Table) == 0)
any(dim(rv$CU_Table) == 0)
any(dim(rv$CU_Table) == 0)
rv$CU_Table
any(dim(rv$CU_Table) == 0)
any(dim(rv$CU_Table) == 0)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
any(dim(rv$CU_Table) == 0)
rv$CU_Table
any(tmp$unit == "custom")
savevar$emlal$templateDP$Nitrogen_fixation.csv
savevar$emlal$templateDP$Nitrogen_fixation.csv$unit == "custom"
rv$current_index
if(rv$current_index == 1){}
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
)
fread(
paste(savevar$emlal$selectDP$dp_path,
savevar$emlal$selectDP$dp_name,
"metadata_templates",
"custom_units.txt",
sep = "/"
),
data.table = FALSE,
stringsAsFactors = FALSE,
na.strings = NULL
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
v
globals$EMLAL$HISTORY
rv$attributesNames
savevar$emlal$templateDP$Nitrogen_fixation.csv
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$CU_Table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$templateDP$Nitrogen_fixation.csv
savevar$emlal$templateDP$custom_units
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)

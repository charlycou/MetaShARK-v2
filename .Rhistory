golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
names(input)
names(input)
names(input)
colnames(rv$current_table) %in% names(input)
grepl(colnames(rv$current_table), names(input))
sapply(colnames(rv$current_table), grepl, names(input))
any(sapply(colnames(rv$current_table), grepl, names(input)))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
sapply(colnames(rv$current_table), grepl, names(input))
any(sapply(colnames(rv$current_table), grepl, names(input)))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
rv$current_table
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
isTruthy(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]])
!isTruthy(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]) ||
identical(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]], data.frame())
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
savevar$emlal$Attributes
rv$current_table
rv$current_table
savevar$emlal$Attributes$attributes_decomp.txt
rv$current_file
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
rv$current_file
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
rv$current_table
rv$files[rv$current_file]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
rv$complete
rvcomplete
rv$complete
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
names(input)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
nextStep
savevar$emlal$Attributes[[fn]][, "unit"]
savevar$emlal$Attributes[[fn]][, "class"]
fn
fn
savevar$emlal$Attributes[[fn]][, "unit"]
savevar$emlal$Attributes[[fn]][, "class"]
nextStep > 0 &&
"custom" %in% savevar$emlal$Attributes[[fn]][, "unit"]
nextStep > 1 &&
"categorical" %in% savevar$emlal$Attributes[[fn]][, "class"]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
!any(
grepl("catvar",
dir(
paste(savevar$emlal$SelectDP$dp_path,
savevar$emlal$SelectDP$dp_name,
"metadata_templates",
sep = "/")
)
)
)
!any(
grepl("catvar",
dir(
paste(savevar$emlal$SelectDP$dp_path,
savevar$emlal$SelectDP$dp_name,
"metadata_templates",
sep = "/")
)
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
min(
sapply(seq_along(rv$filenames), function(cur_ind) {
incProgress(1/7) # x3
# write filled tables
# cur_ind <- match(fn, rv$filenames)
fn <- rv$filenames[cur_ind]
path <- savevar$emlal$DataFiles$dp_data_files$metadatapath[cur_ind]
table <- savevar$emlal$Attributes[[fn]]
fwrite(table, path)
# check for direction: CustomUnits or CatVars
if ("custom" %in% savevar$emlal$Attributes[[fn]][, "unit"]) {
return(0)
} # custom units
else if ("categorical" %in% savevar$emlal$Attributes[[fn]][, "class"]) {
rv$templateCatvars <- TRUE
return(1) # categorical variables
}
else {
return(2)
} # default = geographic Coverage
})
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
templateCatvars
min(0,2)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
templateCatvars
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.$SelectDP$dp_title
. <- readRDS("~/dataPackagesOutput/emlAssemblyLine/Test_emldp/Test.rds")
. <- reactiveValuesToList(.)
rm(list = ls())
. <- reactiveValuesToList(.)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.$SelectDP$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
savevar$emlal$SelectDP$dp_name
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
input$dp_title
savevar$emlal$SelectDP$dp_title
savevar$emlal$SelectDP$dp_path
savevar$emlal$SelectDP$dp_title <- title
savevar$emlal$SelectDP
savevar$emlal$SelectDP$dp_title
saveReactive
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
input$title
input$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title <- "Test: the movie"
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$Personnel$middleInitial
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
system.file("resources/nsIndex.RData", package = "MetaShARK")
MetaShARK::
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
system.file("docGuideline.RData", package = "MetaShARK")
system.file("app/www", package = "MetaShARK")
addResourcePath(
"www", system.file("app/www", package = "MetaShARK")
)
golem::addResourcePath(
"www", system.file("app/www", package = "MetaShARK")
)
shiny::addResourcePath(
"www", system.file("app/www", package = "MetaShARK")
)
system.file('data', package='datasets')
resourcePaths()
shiny::resourcePaths()
system.file("inst/resources", package = "MetaShARK")
system.file("resources", package = "MetaShARK")
list.files(system.file("app/www", package = "MetaShARK"))
addResourcePath('datasets', system.file('data', package='datasets'))
resourcePaths()
library(shiny)
addResourcePath('datasets', system.file('data', package='datasets'))
resourcePaths()
list.files(resourcePaths()$datasets)
list.files(resourcePaths()["datasets"])
golem::document_and_reload(); MetaShARK::runMetashark()
remove.packages("MetaShARK")
golem::document_and_reload(); MetaShARK::runMetashark()
golem::document_and_reload(); MetaShARK::runMetashark()
golem::document_and_reload(); MetaShARK::runMetashark()
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
resourcePaths()
resourcePaths()["MetaShARK"]
resourcePaths()["www"]
list.files(resourcePaths()["www"])
dirs(resourcePaths()["www"])
dir(resourcePaths()["www"])
dir(resourcePaths()["www"])
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
dir(resourcePaths()["www"])
"/logo.png"
dir("/")
resourcePaths()$www
resourcePaths()["www"]
dir(resourcePaths()["www"])
system.file("www", package="MetaShARK")
system.file("www/", package="MetaShARK")
system.file("resources", package="MetaShARK")
system.file("app/www", package="MetaShARK")
resourcesPaths <- system.file("resources", package="MetaShARK")
wwwPaths <- system.file("app/www", package="MetaShARK")
resourcesPaths
paste(resourcesPaths, dir(resourcesPaths), sep = "/")
tree("/home/pndb-elie/Softwares/Gits/MetaShARK-v2/inst/")
dir("/home/pndb-elie/Softwares/Gits/MetaShARK-v2/inst/")
system.file("resources", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
wwwPaths
resourcesPaths <- system.file("resources", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
resourcesPaths
wwwPaths
resourcesPaths %in% wwwPaths
basename(resourcesPaths) %in% basename(wwwPaths)
rm(list = ls())
wwwPaths
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
wwwPaths
system.file("app/www", package="MetaShARK")
names(wwwPaths) <- basename(wwwPaths)
wwwPaths
as.list(
wwwPaths
)
wwwPaths
wwwPaths <- as.list(
wwwPaths
)
wwwPaths$nsIndex.RData
source('~/Softwares/Gits/MetaShARK-v2/R/mod-emlal-EMLAL.R')
library(shiny)
ui <- fluidPage(
tags$img(src = wwwPaths$logo.png, width = "100px", height = "100px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tags$img(src = wwwPaths$`EDI-logo.png`, width = "100px", height = "100px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
<img src=wwwPaths$logo.png width="100px" height="100px"/>
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
¨wwwPaths$logo.png
wwwPaths$logo.png
library(shiny)
ui <- fluidPage(
HTML("<img src=wwwPaths$logo.png width="100px" height="100px"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
HTML("<img src=", wwwPaths$logo.png, "" width="100px" height="100px"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
HTML("<img src=", wwwPaths$logo.png, " width="100px" height="100px"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
HTML("<img src=", wwwPaths$logo.png, " width="100px" height="100px"/>")
HTML("<img src=", wwwPaths$logo.png, " width=\"100px\" height=\"100px\"/>")
library(shiny)
ui <- fluidPage(
HTML("<img src=", wwwPaths$logo.png, " width=\"100px\" height=\"100px\"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
HTML("<img src=", wwwPaths$logo.png, " width=\"100px\" height=\"100px\"/>")
HTML("<img src=\"", wwwPaths$logo.png, "\" width=\"100px\" height=\"100px\"/>")
library(shiny)
ui <- fluidPage(
HTML("<img src=\"", wwwPaths$logo.png, "\" width=\"100px\" height=\"100px\"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
addResourcePath(dirname(wwwPaths$logo.png)),
HTML("<img src=\"", wwwPaths$logo.png, "\" width=\"100px\" height=\"100px\"/>")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
(dirname(wwwPaths$logo.png)
)
library(shiny)
ui <- fluidPage(
addResourcePath(dirname(wwwPaths$logo.png)),
HTML("<img src=\"", wwwPaths$logo.png, "\" width=\"100px\" height=\"100px\"/>")
)
server <- function(input, output, session) {
}
a = shinyApp(ui, server)
runApp(a)
library(shiny)
ui <- fluidPage(
addResourcePath(dirname(wwwPaths$logo.png)),
HTML("<img src=\"", wwwPaths$logo.png, "\" width=\"100px\" height=\"100px\"/>")
)
server <- function(input, output, session) {
}
runApp(ui, server)
is.function(server)
?runApp
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
getwd()
shinyApp(
ui = .app_ui, server = .app_server,
onStart = .headerScript
)
app = shinyApp(
ui = .app_ui, server = .app_server,
onStart = .headerScript
)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
dataone::listFormats(dataone::CNode())$MediaType
try(dataone::listFormats(dataone::CNode())$MediaType)
try(dataone::listFormats(dataone::CNode())$MediaType)
a = try(dataone::listFormats(dataone::CNode())$MediaType)
a
class(a)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
a = try(dataone::listFormats(dataone::CNode())$MediaType)
fwrite(a, "inst/app/www/dataoneCNodesList.txt")
fwrite(data.frame(CNode = a), "inst/app/www/dataoneCNodesList.txt")
fread("inst/app/www/dataoneCNodesList.txt")
unlist(fread("inst/app/www/dataoneCNodesList.txt"))
taxonomyCleanr::view_taxa_authorities()
fwrite(taxonomyCleanr::view_taxa_authorities(), "inst/app/www/taxaAuthorities.txt")
fread("inst/app/www/taxaAuthorities.txt")
system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
names(wwwPaths) <- basename(wwwPaths)
wwwPaths
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/")
names(wwwPaths) <- basename(wwwPaths)
wwwPaths
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/") %>%
as.list
names(wwwPaths) <- basename(wwwPaths)
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/") %>%
as.list
names(wwwPaths) <- basename(unlist(wwwPaths))
UNIT.LIST <- c("custom", get_unitList()$units$name)
UNIT.LIST
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
fread(wwwPaths$registeredEndpoints.txt)
fread(system.file("resources", "registeredEndpoints.txt", package = "MetaShARK"))
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rm(list = ls())
wwwPaths <- system.file("app/www", package="MetaShARK") %>%
paste(., dir(.), sep = "/") %>%
as.list
names(wwwPaths) <- basename(unlist(wwwPaths))
wwwPaths
wwwPaths$logo.png
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
tags$span(HTML("
<img src = '",globals$PATHS$logo.png,"' width = '200px' height = '40px'
"))
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
tags$span(HTML(paste0("
<img src = '",globals$PATHS$logo.png,"' width = '200px' height = '40px'
")))
file.exists('/home/pndb-elie/Softwares/Gits/MetaShARK-v2/inst/app/www/logo.png')
tags$img("inst/app/www/logo.png")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
tags$img("inst/app/www/logo.png")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
?addResourcePath
?addResourcePath
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
resourcePaths()
resourcePaths()["www"]
dir(resourcePaths()["www"])
?resourcePaths
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
img(src="something.png", height = 350, width = 350)
)
)
)
server <- function(input, output, session) {
}
runApp(ui, server)
Q
Q
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
img(src="something.png", height = 350, width = 350)
)
)
)
server <- function(input, output, session) {
}
runApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
img(src="something.png", height = 350, width = 350)
)
)
)
server <- function(input, output, session) {
}
runApp(shinyApp(ui, server))
library(shiny)
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
img(src="inst/resources/logo.png", height = 350, width = 350)
)
)
)
server <- function(input, output, session) {
}
runApp(shinyApp(ui, server))
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
getwd()
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
getwd()
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)

) # end of lapply : row_index
)
) # end of bsCollapse
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
attribute_row[ fields[1] ]
attribute_row <- rv$current_table[1,]
attribute_row[ ui_fields[1] ]
attribute_row[ 1 ]
try(
bsCollapse(
# id = ns("attributes_collapse"),
tagList(
lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ],
value = row_index
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
) # end of lapply : row_index
)
)
)
tagList(
lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
tagList(
# write each attribute's characteristic
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of tagList
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
) # end of lapply : row_index
)
bsCollapse(
# id = ns("attributes_collapse"),
tagList(
lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
tagList(
# write each attribute's characteristic
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of tagList
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
) # end of lapply : row_index
)
)
wrapup
bsCollapse
test1 <- tagList(
lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
tagList(
# write each attribute's characteristic
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of tagList
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
) # end of lapply : row_index
)
test2 <- lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
tagList(
# write each attribute's characteristic
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of tagList
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
) # end of lapply : row_index
bsCollapse
View(test1)
View(test2)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
View(bsCollapse)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.panels <- lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
)
.panels
unlist(.panels)
Q
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.panels <- lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
)
unlist(.panels, recursive = FALSE)
tagList(.panels)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.panels <- lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
)
.panels <- list(.panels)
names(.panels)
length(.panels)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
isTruthy("")
combx <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)n
combx <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)
x <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)
x <- 0:2
y <- -1:1
expand.grid(x = x, y = y)
expand.grid(
x = c("YYYY","MM","YY", NULL)
)
expand.grid(
x = c("YYYY","MM","YY"),
y = c("YYYY","MM","YY"),
z = c("YYYY","MM","YY")
)
unique(expand.grid(
x = c("YYYY","MM","YY"),
y = c("YYYY","MM","YY"),
z = c("YYYY","MM","YY")
))
rm(list=ls())
install.packages("dataCleanr")
devtools::install_github("EDIorg/dataCleanr")
dataCleanr::data_iso8601
dataCleanr::iso8601_get_format_string("12-1997")
dataCleanr::iso8601_get_format_string("12")
dataCleanr::iso8601_get_format_string("1997-12")
dataCleanr::iso8601_get_format_string("1997:12")
dataCleanr::iso8601_get_format_string("97-12")
iso8601_get_format_string('2012-05-01')
dataCleanr::iso8601_get_format_string('2012-05-01')
iso8601_get_format_string('2012-05-01 4')
iso8601_get_format_string('2012-05-01 04')
dataCleanr::iso8601_get_format_string('2012-05-01 04')
dataCleanr::iso8601_get_format_string('2012-05-01')
dataCleanr::iso8601_get_format_string('2012-05-01 04:45')
dataCleanr::iso8601_get_format_string('2012-05-01 04:45:57')
dataCleanr::iso8601_get_format_string('04:45:57')
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$files
rv$complete
rv$current_table
rv$current_file
savevar$emlal$Attributes[[rv$current_file]]
names(savevar$emlal$Attributes); length(savevar$emlal$Attributes)
names(savevar$emlal$Attributes); length(reactiveValuesToList(savevar$emlal$Attributes))
is.reactivevalues(savevar$emlal$Attributes)
names(input)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
"6-attributeDefinition" %in% names(input)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
paste(1,1,"toto")
paste(1,1,"toto", sep = "-")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)

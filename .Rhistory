bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
)
unlist(.panels, recursive = FALSE)
tagList(.panels)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.panels <- lapply(
seq(dim(rv$current_table)[1]),
function(row_index, fields){
# prepare variables
attribute_row <- rv$current_table[row_index,]
message(row_index)
return(
bsCollapsePanel(
title = attribute_row[ fields[1] ], # TEST
lapply(fields[-1], function(colname) {
# prepare var
saved_value <- rv$current_table[row_index, colname]
# if (grepl("date", colname)) saved_value <- gsub("^(.*) .*$", "\\1", saved_value)
# UI
switch(colname,
attributeDefinition = textAreaInput(
ns(colname),
value = saved_value,
"Describe the attribute concisely"
),
class = HTML(paste("<b>Detected class:</b>", as.vector(saved_value))),
unit = selectInput(
ns(colname),
with_red_star("Select an unit"),
unique(c(saved_value, globals$FORMAT$UNIT)),
selected = saved_value
),
# TODO add a module for hour format
dateTimeFormatString = selectInput(
ns(colname),
with_red_star("Select a date format"),
unique(c(saved_value, globals$FORMAT$DATE)),
selected = saved_value
),
missingValueCode = textInput(
ns(colname),
"Code for missing value",
value = saved_value
),
missingValueCodeExplanation = textAreaInput(
ns(colname),
"Explain Missing Values",
value = saved_value
),
NULL
) # end of switch
}) # end of lapply colname
) # end of bsCollapsePanel
) # end of return
}
, fields = ui_fields
)
.panels <- list(.panels)
names(.panels)
length(.panels)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
isTruthy("")
combx <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)n
combx <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)
x <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
expand.grid(x = x, y = y)
x <- 0:2
y <- -1:1
expand.grid(x = x, y = y)
expand.grid(
x = c("YYYY","MM","YY", NULL)
)
expand.grid(
x = c("YYYY","MM","YY"),
y = c("YYYY","MM","YY"),
z = c("YYYY","MM","YY")
)
unique(expand.grid(
x = c("YYYY","MM","YY"),
y = c("YYYY","MM","YY"),
z = c("YYYY","MM","YY")
))
rm(list=ls())
install.packages("dataCleanr")
devtools::install_github("EDIorg/dataCleanr")
dataCleanr::data_iso8601
dataCleanr::iso8601_get_format_string("12-1997")
dataCleanr::iso8601_get_format_string("12")
dataCleanr::iso8601_get_format_string("1997-12")
dataCleanr::iso8601_get_format_string("1997:12")
dataCleanr::iso8601_get_format_string("97-12")
iso8601_get_format_string('2012-05-01')
dataCleanr::iso8601_get_format_string('2012-05-01')
iso8601_get_format_string('2012-05-01 4')
iso8601_get_format_string('2012-05-01 04')
dataCleanr::iso8601_get_format_string('2012-05-01 04')
dataCleanr::iso8601_get_format_string('2012-05-01')
dataCleanr::iso8601_get_format_string('2012-05-01 04:45')
dataCleanr::iso8601_get_format_string('2012-05-01 04:45:57')
dataCleanr::iso8601_get_format_string('04:45:57')
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$files
rv$complete
rv$current_table
rv$current_file
savevar$emlal$Attributes[[rv$current_file]]
names(savevar$emlal$Attributes); length(savevar$emlal$Attributes)
names(savevar$emlal$Attributes); length(reactiveValuesToList(savevar$emlal$Attributes))
is.reactivevalues(savevar$emlal$Attributes)
names(input)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
"6-attributeDefinition" %in% names(input)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
paste(1,1,"toto")
paste(1,1,"toto", sep = "-")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
req(rv$current_file, rv$current_table, rv$filenames)
savevar$emlal$Attributes
savevar$emlal$Attributes[[rv$filenames[rv$current_file] ]]
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
isolate(rv$current_table)
savevar$emlal$Attributes[[rv$filenames[rv$current_file] ]]
message("saved", rv$files[rv$current_file], "\n")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.reactiveValuesToist
.reactiveValuesToList
?reactiveValuesToList
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
typeof(savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt)
is.reactivevalues(savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt)
is.reactivevalues(savevar$emlal$Attributes[1])
is.reactivevalues(savevar$emlal$Attributes[[1]])
is.reactivevalues(savevar$emlal$Attributes[[1]])
is.reactivevalues(savevar$emlal$Attributes)
is.reactivevalues(savevar$emlal$Attributes)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
names(savevar$emlal$Attributes)
rv$filenames[rv$current_file]
rv$current_table
savevar$emlal$Attributes
rv$filenames[rv$current_file]
rv$current_table
rv$current_file
rv$filenames[rv$current_file]
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
try(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]] <- rv$current_table)
`[[<-`
?`[[<-`
try(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]] <- isolate(rv$current_table))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
rv$current_table
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
isTruthy(rv$current_table)
isTruthy(data.frame(NULL))
isTruthy(data.frame(NULL))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
c*
0
rv$current_table
rv$current_table
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
rv$complete
all(
sapply(
.attributes,
function(table){
isTruthy(table) &&
all(sapply(table$attributeName, isTruthy)) &&
all(sapply(table$class, isTruthy)) &&
!any(grepl("!Add.*here!", table$unit)) &&
!any(grepl("!Add.*here!", table$dateTimeFormatString))
}
)
)
.attributes <- reactiveValuesToList(savevar$emlal$Attributes)
all(
sapply(
.attributes,
function(table){
isTruthy(table) &&
all(sapply(table$attributeName, isTruthy)) &&
all(sapply(table$class, isTruthy)) &&
!any(grepl("!Add.*here!", table$unit)) &&
!any(grepl("!Add.*here!", table$dateTimeFormatString))
}
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
savevar$emlal$Attributes$attributes_decomp.txt
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
names(input)
names(input)
names(input)
colnames(rv$current_table) %in% names(input)
grepl(colnames(rv$current_table), names(input))
sapply(colnames(rv$current_table), grepl, names(input))
any(sapply(colnames(rv$current_table), grepl, names(input)))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
sapply(colnames(rv$current_table), grepl, names(input))
any(sapply(colnames(rv$current_table), grepl, names(input)))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
rv$current_table
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
isTruthy(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]])
!isTruthy(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]) ||
identical(savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]], data.frame())
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
savevar$emlal$Attributes
rv$current_table
rv$current_table
savevar$emlal$Attributes$attributes_decomp.txt
rv$current_file
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$current_table
rv$current_file
rv$current_table
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes[[ rv$filenames[rv$current_file] ]]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
rv$current_table
rv$files[rv$current_file]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes$attributes_decomp.txt
savevar$emlal$Attributes$attributes_Nitrogen_fixation.txt
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
rv$complete
rvcomplete
rv$complete
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$complete
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
names(input)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
nextStep
savevar$emlal$Attributes[[fn]][, "unit"]
savevar$emlal$Attributes[[fn]][, "class"]
fn
fn
savevar$emlal$Attributes[[fn]][, "unit"]
savevar$emlal$Attributes[[fn]][, "class"]
nextStep > 0 &&
"custom" %in% savevar$emlal$Attributes[[fn]][, "unit"]
nextStep > 1 &&
"categorical" %in% savevar$emlal$Attributes[[fn]][, "class"]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
!any(
grepl("catvar",
dir(
paste(savevar$emlal$SelectDP$dp_path,
savevar$emlal$SelectDP$dp_name,
"metadata_templates",
sep = "/")
)
)
)
!any(
grepl("catvar",
dir(
paste(savevar$emlal$SelectDP$dp_path,
savevar$emlal$SelectDP$dp_name,
"metadata_templates",
sep = "/")
)
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
min(
sapply(seq_along(rv$filenames), function(cur_ind) {
incProgress(1/7) # x3
# write filled tables
# cur_ind <- match(fn, rv$filenames)
fn <- rv$filenames[cur_ind]
path <- savevar$emlal$DataFiles$dp_data_files$metadatapath[cur_ind]
table <- savevar$emlal$Attributes[[fn]]
fwrite(table, path)
# check for direction: CustomUnits or CatVars
if ("custom" %in% savevar$emlal$Attributes[[fn]][, "unit"]) {
return(0)
} # custom units
else if ("categorical" %in% savevar$emlal$Attributes[[fn]][, "class"]) {
rv$templateCatvars <- TRUE
return(1) # categorical variables
}
else {
return(2)
} # default = geographic Coverage
})
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
templateCatvars
min(0,2)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
templateCatvars
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.$SelectDP$dp_title
. <- readRDS("~/dataPackagesOutput/emlAssemblyLine/Test_emldp/Test.rds")
. <- reactiveValuesToList(.)
rm(list = ls())
. <- reactiveValuesToList(.)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.$SelectDP$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
savevar$emlal$SelectDP$dp_name
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
input$dp_title
savevar$emlal$SelectDP$dp_title
savevar$emlal$SelectDP$dp_path
savevar$emlal$SelectDP$dp_title <- title
savevar$emlal$SelectDP
savevar$emlal$SelectDP$dp_title
saveReactive
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title
input$title
input$dp_title
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$SelectDP$dp_title <- "Test: the movie"
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$Personnel$middleInitial
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
library(devtools)
install_github("earnaud/MetaShARK-v2", ref="dev")
MetaShARK::runMetashark()
library(MetaShARK)
upupdate_packages("rlang")
update_packages("rlang")
package_version("rlang")
package_version(rlang)
package_version()
package_version(1)
package_version(3.6)
package_version("3.6")
package_info("rlang")
remove.packages("rlang")
unload("rlang")
install.packages("rlang")
package_info("rlang")
MetaShARK::runMetashark()
install_github("MetaShARK")
install_github("earnaud/MetaShARK-v2", ref="dev")
install_github("earnaud/MetaShARK-v2", ref="dev", force = TRUE)
MetaShARK::runMetaShARK()

show("appOptions")
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all()
runMetashark()
runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
dataone::getTokenInfo()
dataone::getTokenInfo()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
names(input)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
multiFIlesInputUI <- function(id, helpText = NULL){
ns <- NS(id)
fluidPage(
h4("Data files"),
tags$p(helpText),
div(
shinyFilesButton(ns("add_files"),
"Load files",
"Select data file(s) from your dataset",
multiple = TRUE,
icon = icon("plus-circle")),
style = "display: inline-block; vertical-align: top;"
),
actionButton(ns("remove_files"),"Remove",
icon = icon("minus-circle"),
class = "redButton"),
uiOutput(ns("files"))
)
}
multiFIlesInput <- fucntino(input, output, session){
rv <- reactiveValues(
# to save
files = data.frame()
# local only
)
volumes <- c(Home = fs::path_home(), getVolumes()())
# Add data files
shinyFileChoose(input, "add_files",
roots = volumes,
# defaultRoot = HOME,
session = session)
observeEvent(input$add_files,{
# validity checks
req(input$add_files)
# actions
loadedFiles <- as.data.frame(
parseFilePaths(volumes, input$add_files)
)
if(identical(rv$files, data.frame()))
rv$files <- loadedFiles
else{
for(filename in loadedFiles$name){
if(!grepl("\\.",filename))
message(filename," is a folder or misformed file.")
else
rv$files <- unique(rbind(rv$files,
loadedFiles[loadedFiles$name == filename,])
)
}
}
})
# Remove data files
observeEvent(input$remove_files, {
# validity check
req(input$select_files)
# actions
rv$files <- rv$files[
rv$files$name != input$select_files
,]
})
# Display data files
output$files <- renderUI({
# actions
if(!identical(rv$files, data.frame()) &&
!is.null(rv$files)){
checkboxGroupInput(ns("select_files"),
"Select files to delete (all files here will be kept otherwise)",
choices = rv$files$name)
}
else{
return(NULL)
}
})
}
rm(list=ls())
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){callModule(multiFIlesInput,"e")})
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
list(md = NULL)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools
devtools::load_all()
?hr()
devtools::load_all(); runMetashark(dev=TRUE)
names(input)
ns("")
session$ns("")
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
endpoints <- data.frame(
endpoint = c("PNDB"),
URL = c("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
)
endpoints
fwrite(endpoints, "resources/registeredEndpoints.txt", sep = "\t")
endpoints <- data.frame(
mn = c("PNDB"),
URL = c("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/"),
cn = c("STAGING")
)
fwrite(endpoints, "resources/registeredEndpoints.txt", sep = "\t")
fread("resources/registeredEndpoints.txt")
rE <- fread("resources/registeredEndpoints.txt")
paste("Current endpoint:", rE[match(endpoint(), rE$mn), "URL"])
paste("Current endpoint:", rE[match("PNDB", rE$mn), "URL"])
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
rvFiles$md()
rvFiles$md() == 1
devtools::load_all(); runMetashark(dev=TRUE)
ls()
rm(list = ls())
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
endpoint()
registeredEndpoints
devtools::load_all(); runMetashark(dev=TRUE)
data.frame()
dim(data.frame())
dim(data.frame())
devtools::load_all(); runMetashark(dev=TRUE)
rvFiles$md()
dim(rvFiles$md())
dim(rvFiles$md())[1]
dim(rvFiles$md())[1] != 1 ||
dim(rvFiles$data)[1] < 1
dim(rvFiles$data)[1]
rvFiles$data
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
?getData
dataone::getTokenInfo()
dataone::getTokenInfo(.Options)
dataone::getTokenInfo(options())
dataone::getTokenInfo(options(dataone_token))
options(dataone_token)
options(dataone_test_token = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJodHRwOlwvXC9vcmNpZC5vcmdcLzAwMDAtMDAwMy0zNDE2LTc2NTMiLCJmdWxsTmFtZSI6IkVsaWUgQXJuYXVkIiwiaXNzdWVkQXQiOiIyMDE5LTExLTI1VDEzOjMxOjU5Ljk1MyswMDowMCIsImNvbnN1bWVyS2V5IjoidGhlY29uc3VtZXJrZXkiLCJleHAiOjE1NzQ3NTM1MTksInVzZXJJZCI6Imh0dHA6XC9cL29yY2lkLm9yZ1wvMDAwMC0wMDAzLTM0MTYtNzY1MyIsInR0bCI6NjQ4MDAsImlhdCI6MTU3NDY4ODcxOX0.k8g_fcu1yV-EaTY6Y8gutP5Zb1oQv7Eg6fz8roFKnvva5Ph6MmvbAfh8tcFDuE4Cimx5mOeQtxqKDtxBsAlgrg8QSVhAyzA13dJ269D6anYTzR23F4ZFB--4rNlfiuSPWKP4VqkLlPpOTREUAVV_4LWJ-cdheAq6UKaabuh5l6sjvuM1Qmdgwxr176GrwxYzMD1UTUkEK0_RiKDg1dHHuugSf8ukVreRjEe6BRyCD5Ifczrpx-_fTS_S3P_978PVcd0DdmJdceWercP47YnMF0pSV58aWNgHRRihqxQw3676uwDMemTMy1tLLQ3aEn1Kksj50tW0s-5lP6o-uGxDew")
options(dataone_token)
options(dataone_test_token)
options("dataone_test_token")
options("dataone_token")
options(dataone_test_token = NULL)
options("dataone_token")
options("dataone_test_token")
renderText("a")
renderText("a")()
renderText("<b>a</b>")()
dataone::generateIdentifier
standardGeneric("generateIdentifier")
standardGeneric("generateIdentifier")
dataone::standardGeneric("generateIdentifier")
?standardGeneric
registeredEndpoints <- fread("resources/registeredEndpoints.txt")
getwd()
registeredEndpoints <- data.table::fread("resources/registeredEndpoints.txt")
options("dataone_token")
options("dataone_test_token")
registeredEndpoints$URL
registeredEndpoints$URL <- "https://openstack-192-168-100-101.genouest.org/metacatui"
data.table::fwrite(registeredEndpoints, "resources/registeredEndpoints.txt")
dataone::addMember
datapack::addMember
class("DataObject")
devtools::load_all(); runMetaShARK(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
EML::eml$otherEntity
args(EML::eml$otherEntity())
args(EML::eml$otherEntity)
str(args(EML::eml$otherEntity))
args(EML::eml$otherEntity)
library(dataone)
mn <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
d1c@mn@identifier
devtools::load_all(); runMetashark(dev=TRUE)
d1c@mn
?"D1Client-initialize"
D1Client
cn <- CNode("STAGING"); ln <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2")
d1c <- new("D1Client", cn, mn)
d1c@mn@identifier
cn <- CNode("STAGING"); mn <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2")
d1c <- new("D1Client", cn, mn)
d1c@mn@identifier
EML::shiny_attributes()
datapack
?datapack::DataPackage
library(datapack)
devtools::load_all(); runMetashark(dev=TRUE)
rvFiles$md()
mime::guess_type(rvFiles$md()$datapath)
rvFiles$data()
endpoint()
registeredEndpoints
registeredEndpoints %>% dplyr::filter()
registeredEndpoints %>% dplyr::filter(mn = endpoint())
registeredEndpoints %>% dplyr::filter(mn == endpoint())
registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL)
registeredEndpoints
rvFiles$md()
apply(rvFiles$data(), 1, print)
apply(rvFiles$data(), 2, print)
invisible(apply(rvFiles$data(), 2, print))
sapply(rvFiles$data()$datapath)
sapply(rvFiles$data()$datapath, print)
seq_along(NULL)
sapply(seq_along(NULL), print("i"))
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
options("dataone_test_token")
endpoint()
registeredEndpoints
registeredEndpoints$URL <- "https://openstack-192-168-100-101.genouest.org/d1/mn/v2"
fwrite(registeredEndpoints, "resources/registeredEndpoints.txt")
uploadDP(mn = registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL),
cn = registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(cn),
eml = rvFiles$md()$datapath,
data = rvFiles$data()$datapath)
library(dataone)
library(datapack)
uploadDP(mn = registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL),
cn = registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(cn),
eml = rvFiles$md()$datapath,
data = rvFiles$data()$datapath)
registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL)
uploadDP(mn = as.character(registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL)),
cn = as.character(registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(cn)),
eml = rvFiles$md()$datapath,
data = rvFiles$data()$datapath)
registeredEndpoints
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
a <- fread("resources/registeredEndpoints.txt")
a$URL <- "https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2/"
fwrite(a, "resources/registeredEndpoints.txt")
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)*
Q
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
length(doc$dataset$dataTable)
sapply(doc$dataset$dataTable, function(i) i$entityName)
break()
devtools::load_all(); runMetashark(dev=TRUE)
fread("resources/registeredEndpoints.txt")$URL
d1c@mn@identifier
traceback()
mime::guess_type("logo.png")
mime::guess_type("~/Music/Djiin/The Freak/01-Djiin _ Glow.mp3")
mime::guess_type("DESCRIPTION")
mime::guess_type("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
devtools::load_all(); runMetashark(dev=TRUE)
endpoint()
as.character(registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL))
as.character(registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(cn))
CNode("STAGING")
rvFiles$md()$datapath
rvFiles$data()$datapath
MNode(as.character(registeredEndpoints %>% dplyr::filter(mn == endpoint()) %>% dplyr::select(URL)))
mn
cn
read_eml(eml)
!is.null(NULL)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
scripts
isTruthy(scripts)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
isTruthy(NULL)
isTruthy(c())
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
q
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
typeof(doc)
class(doc)
eml
write_eml(doc, eml)
Q
devtools::load_all(); runMetashark(dev=TRUE)
dim(doc$dataset$dataTable)
length(doc$dataset$dataTable)
mime::guess_type("~/CES2_FH_File/data_objects/Tab_1.csv")
mime::mimemap
length(mime::mimemap
)
devtools::load_all(); runMetashark(dev=TRUE)
try(
sapply(seq_along(data), function(ind){
dataObj <- new("DataObject",
id = id$data[ind],
format = "text/csv",
filename = data[ind])
dp <- addMember(dp, dataObj, mo = metadataObj)
})
)
id$data
id$scripts
devtools::load_all(); runMetashark(dev=TRUE)
id$data
input$process
cn <- CNode()
fmt <- getFormat(cn, "eml://ecoinformatics.org/eml-2.1.0")
library(dataone)
cn <- CNode()
fmt <- getFormat(cn, "eml://ecoinformatics.org/eml-2.1.0")
fmt
listFormats()
formats <- listFormats(cn)
formats
mime::guess_type("~/Desktop/.Rhistory")
mime::guess_type("~/Desktop/.Rhistory") %in% format
mime::guess_type("~/Desktop/.Rhistory") %in% formats
mime::guess_type("~/Desktop/r-conda_story.md") %in% formats
formats
head(formats)
mime::guess_type("~/Desktop/r-conda_story.md") %in% formats$MediaType
mime::guess_type("~/Desktop/.Rhistory") %in% formats$MediaType
listFormats(CNode)$MediaType
listFormats(CNode())$MediaType
library(dataone)
?DataObject
library(datapack)
?getD1Object()
message(this.format, "is not recognized")
this.format = "a"
message(this.format, "is not recognized")
library(datapack)
?datapack::describeWorkflow()
cn <- CNode("STAGING")
cn <- CNode("STAGING")
datapack::DataPackage-class
?dataone::getDataPackage()
?describeWorkflow
?datapack::describeWorkflow
devtools::load_all()
?MetaShARK::uploadDP()
?uploadDP
devtools::load_all()
?uploadDP
uploadDP()
?uploadDP()
httr::oauth_endpoints()
httr::oauth_endpoints("google")
httr::oauth_endpoints("metacat")
httr::oauth_endpoints("facebook")
install.packages("rorcid")
library(rorcid)
?orcid_auth()
orcid_auth()
doc <- read_eml("~/CES2_FH_File/eml/edi.300.6.xml")
x <- orcid()
x
as.orcid("0000-0003-3416-7653")
as.orcid("0000-0003-3416-7653")
orcid_auth()
orcid()
orcid_auth()
install.packages("curl")
install.packages("curl")
curl::curl("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
curl("https://cn.dataone.org/portal/token")
curl::curl("https://cn.dataone.org/portal/token")
x <- curl::curl_download("https://cn.dataone.org/portal/token")
x <- curl::curl_fetch_memory("https://cn.dataone.org/portal/token")
x
?curl
orcid_auth()
library(rorcid)
orcid_auth()
orcid()
oauth
oauth
curl::curl("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/)
")
curl::curl("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacat")
curl("https://cn.dataone.org/portal/token")
curl::curl_fetch_memory("https://cn.dataone.org/portal/token")
names(options())
sessionInfo()
httr::GET("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x = httr::GET("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x
View(x)
x[["content"]]
as.character(x$content)
typeof(x$content)
rawToChar(x$content)
y <- rawToChar(x$content)
View(y)
View(y)
grepl("token", y)
grepl("token", tolower(y))
grepl("Token", y)
grepl("TOKEN", y)
stringr::str_locate(y, "TOKEN")
stringr::str_sub(y, 3000, 3100)
stringr::str_locate(y, "[a-zA-Z0-9]{30+}")
stringr::str_locate(y, "[a-zA-Z0-9]{30}")
stringr::str_locate(y, "[a-zA-Z0-9]{100+}")
stringr::str_locate(y, "[a-zA-Z0-9]{100}")
orcid_auth()
req <- curl_fetch_memory("https://eu.httpbin.org/get?foo=123")
library(curl)
req <- curl_fetch_memory("https://eu.httpbin.org/get?foo=123")
req
rawToChar(req$content)
cat(rawToChar(req$content))
cat(rawToChar(x$content))
str(x)
x$request$auth_token
View(x$request$auth_token)
View(str(x))
x$cookies$value
orcid_auth()
httr::GET("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x = httr::GET("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x$cookies$value
x
grepl("eyJh", x)
orcid_auth()
httr::GET("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x = curl_fetch_memory("https://cn.dataone.org/portal/oauth?action=start&target=https://openstack-192-168-100-101.genouest.org/metacatui")
x$content
jsonlite::prettify(rawToChar(x$content))
grepl("textarea",x$content)
grepl("textarea",rawToChar(x$content))
golem::document_and_reload(); runMetashark(dev=TRUE)
workflowFiles$`4`
golem::document_and_reload(); runMetashark(dev=TRUE)
workflowFiles$`2`
workflowFiles$`2`$source()
workflowFiles$`1`
workflowFiles$`1`$source()
a = rreactive()
a = reactive()
a = reactive(1)
a()
golem::document_and_reload(); runMetashark(dev=TRUE)
workflowFiles$`1`
workflowFiles$`1`$source()
workflowFiles$`1`
workflowFiles
observeEvent()
observeEvent(1)
observeEvent(eventExpr = 1)
observeEvent(eventExpr = 1, 1$)
observeEvent(eventExpr = 1, 1)
a = observeEvent(eventExpr = 1, 1)
?observeEvent

coordinates[,1] <= coordinates[,2],
]), 25)
coordinates[
coordinates[,1] <= coordinates[,2],
] <- rev(coordinates[
coordinates[,1] <= coordinates[,2],
])
head(coordinates, 25)
if(all(coordinates[,1] >= coordinates[,2])){
colnames(coordinates) <- c("N","S")
} else if(all(coordinates[,1] <= coordinates[,2])){
colnames(coordinates) <- c("S","N")
}
else stop("")
if(all(coordinates[,1] >= coordinates[,2])){
colnames(coordinates) <- c("N","S")
} else if(all(coordinates[,1] <= coordinates[,2])){
colnames(coordinates) <- c("S","N")
} else stop("")
all(coordinates[,1] >= coordinates[,2])
all(coordinates[,1] <= coordinates[,2])
if(all(coordinates[,1] >= coordinates[,2])){
colnames(coordinates) <- c("N","S")
} else if(all(coordinates[,1] <= coordinates[,2])){
colnames(coordinates) <- c("S","N")
}
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
) %>%
lapply(., gsub,
pattern = ",",
replacement = ".") %>%
as.data.frame(stringsAsFactors = FALSE)
coordinates[
coordinates[,1] <= coordinates[,2],
]
dim(coordinates)
head(coordinates)
ns("latitude")
disable("nav-nextTab")
enable("nav-nextTab")
rv$columns$geographicDescription
rv$columns$sites
rv$columns$sites$geographicDescription <- rv$columns$geographicDescription
observeEvent(input$site_description, {
rv$geographicDescription = input$site_description
})
?reactiveTable
?reactiveTable
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
show(ns("slider_tips"))
show("slider_tips")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
localRV
localRV$id
sapply(localRV, print)
printReactiveValues(localRV)
rv
printReactiveValues(rv)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
localRV
printReactiveValues(localRV)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
ns("a")
session$ns("a")
input$site_description
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
localRV
printReactiveValues(localRV)
ind <- match(ref, rv$id)
ind
rv$id
sapply(rv$id, browser())
x
sapply(rv$id, function(x) browser())
x
sapply(rv$id, function(x) browser())
sapply(rv$id, print)
rv
localRV
printReactiveValues(localRV)
rv <- localRV
printReactiveValues()
printReactiveValues(rv)
ind
match(ref, rv$id)
actualValues
actualValues <- printReactiveValues(localRV)
actualValues
sapply(names(actualValues))
sapply(names(actualValues), function(x) browser())
actualValues[x]
rv[[x]]
ind
ind <- match(ref, rv$id)
ind
sapply(names(actualValues), function(rvid){
# rv[[rvid]][ind] <- actualValues[rvid]
rv[[rvid]][ind]
actualValues[rvid]
})
sapply(names(actualValues), function(rvid){
# rv[[rvid]][ind] <- actualValues[rvid]
print(rv[[rvid]][ind])
print(actualValues[rvid])
})
sapply(names(actualValues), function(rvid){
# rv[[rvid]][ind] <- actualValues[rvid]
rv[[rvid]]
})
ind
length(rv$id)
rv$id
as.numeric(rv$id)
2*rv$id
ind
rv
printReactiveValues(rv)
ind
length(rv$id)+1
rv[[rvid]][ind]
sapply(names(actualValues), function(rvid){
# rv[[rvid]][ind] <- actualValues[rvid]
rv[[rvid]][ind]
})
ind
ind <- length(rv$id)+1
sapply(names(actualValues), function(rvid){
# rv[[rvid]][ind] <- actualValues[rvid]
rv[[rvid]][ind]
})
printReactiveValues()
printReactiveValues(rv)
ind
actualValues <- printReactiveValues(localRV)
sapply(names(actualValues), function(rvid){
rv[[rvid]][ind] <- actualValues[rvid]
# rv[[rvid]][ind]
})
printReactiveValues(rv)
typeof(printReactiveValues(rv))
dim(printReactiveValues(rv))
is.array(printReactiveValues(rv))
typeof(rv)
class(rv)
todor::todor()
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv$custom)
printReactiveValues(rv$custom)
ind
names(rv)
sapply(names(rv), print)
sapply(names(rv), function(x) print(rv[[x]][ind]))
savedRV <- rv
sapply(names(rv), function(rvid){
rv[[rvid]][ind] <- NULL
# rv[[rvid]][ind]
})
sapply(names(rv), function(rvid){
rv[[rvid]] <- rv[[rvid]][-ind]
# rv[[rvid]][ind]
})
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
message(ind, "--- Saved")
message(1, "a")
Q
message(ind, "--- Saved")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
ind
printReactiveValues(rv)
sapply(names(rv), function(rvid){
rv[[rvid]][-ind]
})
sapply(names(rv), function(rvid){
rv[[rvid]] <- rv[[rvid]][-ind]
})
printReactiveValues(rv)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv)
rv$columns
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
message(ind, "--- Saved")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
ns("latitude")
insertUI(
selector = paste0("#", ns("latitude")),
ui = tags$div(
tags$p("Two numbers must be provided in either one or two columns."),
class = "redButton"
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
latCols = data.frame(
a = 1:10,
b = 11:20,
c = 21:30
)
latPattern ="[+-]?[[:digit:]]+[.,]*[[:digit:]]*"
lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
)
lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
) %>%
lapply(., gsub,
pattern = ",",
replacement = ".") %>%
as.data.frame(stringsAsFactors = FALSE)
dim(lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
) %>%
lapply(., gsub,
pattern = ",",
replacement = ".") %>%
as.data.frame(stringsAsFactors = FALSE))
dim(lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
) %>%
lapply(., gsub,
pattern = ",",
replacement = ".") %>%
as.data.frame(stringsAsFactors = FALSE))
lapply(
latCols,
stringr::str_extract_all,
latPattern,
simplify = TRUE
) %>%
lapply(., gsub,
pattern = ",",
replacement = ".") %>%
as.data.frame(stringsAsFactors = FALSE)rm(list = ls())
rm(list=ls())
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv$columns)
"1" %>% unlist
c("a", "b") %>% dplyr::select(1)
c("a", "b") %>% dplyr::select(., 1)
?num_range
c("a", "b") %>% .[1]
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
3:11+3:11
a = factor(c(0,1,0,1))
a
a+1
as.factor(as.numeric(a)+)1
as.factor(as.numeric(a)+1)
as.nuleric(a)
as.numeric(a)
as.factor(as.numeric(a))
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
data.content
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
data.content
lapply(
names(data.content),
function(data.filename){
browser()
})
data.filename
data.content[[data.filename]]
lapply(data.content[[data.filename]], typeof)
lapply(data.content[[data.filename]], is.numeric)
data.content[[data.filename]][[lapply(data.content[[data.filename]], is.numeric)]]
sapply(data.content[[data.filename]], is.numeric)
data.content[[data.filename]][[sapply(data.content[[data.filename]], is.numeric)]]
data.content[[data.filename]][,sapply(data.content[[data.filename]], is.numeric)]
data.content[[data.filename]]
data.content[[data.filename]][,TRUE]
data.content[[data.filename]][,c(TRUE,FALSE,TRUE)]
sapply(data.content[[data.filename]], is.numeric)
as.vector(sapply(data.content[[data.filename]], is.numeric))
data.content[[data.filename]][,as.vector(sapply(data.content[[data.filename]], is.numeric))]
data.content[[data.filename]]
data.content[[data.filename]][,which(sapply(data.content[[data.filename]], is.numeric))]
data.content[[data.filename]][[sapply(data.content[[data.filename]], is.numeric)]]
sapply(data.content[[data.filename]], function(col){})
lapply(
names(data.content),
function(data.filename){
data.filename %>% select(is.numeric)
})
?dplyr::select
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]] %>% select(is.numeric)
})
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]] select(is.numeric)
})
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]] %>% is.numeric
})
lapply(
names(data.content),
function(data.filename){
lapply(data.content[[data.filename]], is.numeric)
})
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]][,
unlist(lapply(data.content[[data.filename]], is.numeric))
]
})
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]][,
which(unlist(lapply(data.content[[data.filename]], is.numeri)c))
]
})
lapply(
names(data.content),
function(data.filename){
data.content[[data.filename]][,
which(unlist(lapply(data.content[[data.filename]], is.numeric)))
]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df.num <-unlist(lapply(df, is.numeric))
browser()
})
df.num
df[,df.num]
df[, ..df.num]
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df[, ..unlist(lapply(df, is.numeric))]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df[, ..(unlist(lapply(df, is.numeric)))]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df[, unlist(lapply(df, is.numeric))]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df.num <-unlist(lapply(df, is.numeric))
df[, ..df.num]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df.num <-unlist(lapply(df, grepl, pattern = globals$PATTERN$LATLON))
df[, ..df.num]
})
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
pattenr
pattern
coordPattern
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
coordPattern
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
df.num <-unlist(lapply(df, grepl, pattern = coordPattern))
df[, ..df.num]
df.num <-unlist(lapply(df, grepl, pattern = coordPattern))
df.nul
df.num
df.num <-lapply(df, grepl, pattern = coordPattern)
df.num <-lapply(df, grepl, pattern = coordPattern)
df.num
df.num <-lapply(df, grepl, pattern = coordPattern) %>% all
df
apply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
df.num <- lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
df[, ..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
}))
df[, ..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
}))
df[,..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(is.numeric.Date(df.coll))
}))
df[,..df.num]
is.numeric(df$DATE)
is.numeric.Date(df$DATE)
install.packages("lubridate")
Q
install.packages("lubridate")
install.packages("lubridate")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
lubridate::is.Date(df$DATE)
lubridate::is.Date(df$DATE[1])
lubridate::is.Date(as.Date(df$DATE[1]))
lubridate::is.timespan(df$DATE)
lubridate::is.timespan(df$DATE[1])
as.Date("a")
as.Date(16)
as.Date(1645)
as.Date("1645")
as.Date("01/12/1645")
df.num <- unlist(
lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
)
df[,..df.num]
sum(1:7)+sum(1:6)
sum(1:10)+sum(1:9)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
df[,..df.nu]
df[,..df.num]
data.content
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
data.content
lapply(
names(data.content),
function(data.filename){
tmp <- paste0(colnames(data.content[[data.filename]]), " (", data.filename, ")")
names(tmp) <- colnames(data.content[[data.filename]])
return(tmp)
})
c
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
48-25
sum(1:2)-sum(3:7)
64-35
sum(1:4)-sum(3:9)
80-52
sum(7:11)
rv$columns
printReactiveValues(rv$columns)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$columns$westBoundingCoordinate
length(rv$columns$westBoundingCoordinate)
rv$columns
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
dim(latCols)
length(latCols)
latCols[[1]]
latCols[[2]]
latCols[[1]]
names(latCols)
names(input$latitude)
input$latitude
?basename
length(input$latitude)
savevar$emlal$DPfiles$dp_data_files$datapath
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
input$latitude
gsub("\\((.*)\\)","\\1", input$latitude)
gsub(".*\\((.*)\\)","\\1", input$latitude)
currentFile <- gsub(".*\\((.*)\\)","\\1", input$latitude)
columns.coordinates
columns.coordinates[[currentFile]]
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv$columns)
character()
isTruthy(character())

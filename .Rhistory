df <- data.content[[data.filename]]
df[, unlist(lapply(df, is.numeric))]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df.num <-unlist(lapply(df, is.numeric))
df[, ..df.num]
})
lapply(
names(data.content),
function(data.filename){
df <- data.content[[data.filename]]
df.num <-unlist(lapply(df, grepl, pattern = globals$PATTERN$LATLON))
df[, ..df.num]
})
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
pattenr
pattern
coordPattern
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
coordPattern
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
df.num <-unlist(lapply(df, grepl, pattern = coordPattern))
df[, ..df.num]
df.num <-unlist(lapply(df, grepl, pattern = coordPattern))
df.nul
df.num
df.num <-lapply(df, grepl, pattern = coordPattern)
df.num <-lapply(df, grepl, pattern = coordPattern)
df.num
df.num <-lapply(df, grepl, pattern = coordPattern) %>% all
df
apply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
df.num <- lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
df[, ..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
}))
df[, ..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
}))
df[,..df.num]
df.num <- unlist(lapply(df, function(df.col){
all(is.numeric.Date(df.coll))
}))
df[,..df.num]
is.numeric(df$DATE)
is.numeric.Date(df$DATE)
install.packages("lubridate")
Q
install.packages("lubridate")
install.packages("lubridate")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
lubridate::is.Date(df$DATE)
lubridate::is.Date(df$DATE[1])
lubridate::is.Date(as.Date(df$DATE[1]))
lubridate::is.timespan(df$DATE)
lubridate::is.timespan(df$DATE[1])
as.Date("a")
as.Date(16)
as.Date(1645)
as.Date("1645")
as.Date("01/12/1645")
df.num <- unlist(
lapply(df, function(df.col){
all(grepl(coordPattern, df.col))
})
)
df[,..df.num]
sum(1:7)+sum(1:6)
sum(1:10)+sum(1:9)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
df[,..df.nu]
df[,..df.num]
data.content
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
data.content
lapply(
names(data.content),
function(data.filename){
tmp <- paste0(colnames(data.content[[data.filename]]), " (", data.filename, ")")
names(tmp) <- colnames(data.content[[data.filename]])
return(tmp)
})
c
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
48-25
sum(1:2)-sum(3:7)
64-35
sum(1:4)-sum(3:9)
80-52
sum(7:11)
rv$columns
printReactiveValues(rv$columns)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$columns$westBoundingCoordinate
length(rv$columns$westBoundingCoordinate)
rv$columns
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
dim(latCols)
length(latCols)
latCols[[1]]
latCols[[2]]
latCols[[1]]
names(latCols)
names(input$latitude)
input$latitude
?basename
length(input$latitude)
savevar$emlal$DPfiles$dp_data_files$datapath
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
input$latitude
gsub("\\((.*)\\)","\\1", input$latitude)
gsub(".*\\((.*)\\)","\\1", input$latitude)
currentFile <- gsub(".*\\((.*)\\)","\\1", input$latitude)
columns.coordinates
columns.coordinates[[currentFile]]
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
printReactiveValues(rv$columns)
character()
isTruthy(character())
gsub(".*\\((.*)\\)","\\1", c("A (B)", ,"C (D)") )
gsub(".*\\((.*)\\)","\\1", c("A (B)", "C (D)") )
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
length(input$latitude)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
input$site
input$latitude
input$latitudelong
input$longitude
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
?isolate
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rm("a")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
ls()
input$latitude
input$longitude
input$site
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
input$latitude
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
input$latitude
input$longitude
input$latitude
input$longitude
input$latitude
input$longitude
a <- (function(){return()})()
a
rm("a")
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
tags$h3("Filter data with selectize group"),
panel(
selectizeGroupUI(
id = "my-filters",
params = list(
manufacturer = list(inputId = "manufacturer", title = "Manufacturer:"),
model = list(inputId = "model", title = "Model:"),
trans = list(inputId = "trans", title = "Trans:"),
class = list(inputId = "class", title = "Class:")
)
), status = "primary"
),
DT::dataTableOutput(outputId = "table")
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "my-filters",
data = mpg,
vars = c("manufacturer", "model", "trans", "class")
)
output$table <- DT::renderDataTable(res_mod())
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
panel(
selectizeGroupUI(
id = "coords",
params = list(
latitude = list(inputId = "latitude", title = "Latitude"),
longitude = list(inputId = "longitude", title = "Longitude")
)
), status = "primary"
)
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "coords",
data = data.frame(
a = 1:3,
b = 4:6,
c = 7:9
),
vars = c("a", "b")
)
}
shinyApp(ui, server)
}
mpg
typeof(mpg)
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
panel(
selectizeGroupUI(
id = "coords",
params = list(
latitude = list(inputId = "latitude", title = "Latitude"),
longitude = list(inputId = "longitude", title = "Longitude")
)
), status = "primary"
)
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "coords",
data = data.frame(
a = 1:3,
b = 4:6,
c = 7:9
),
vars = list(aa = c("a", "b"), bb = c("a","c"))
)
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
panel(
selectizeGroupUI(
id = "coords",
params = list(
latitude = list(inputId = "latitude", title = "Latitude"),
longitude = list(inputId = "longitude", title = "Longitude")
)
), status = "primary"
)
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "coords",
data = data.frame(
a = 1:3,
b = 4:6,
c = 7:9
),
vars =  c("a", "b")
)
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
panel(
selectizeGroupUI(
id = "coords",
params = list(
latitude = list(inputId = "latitude", title = "Latitude"),
longitude = list(inputId = "longitude", title = "Longitude")
)
), status = "primary"
)
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "coords",
data = data.frame(
a = 1:3,
b = 4:6,
c = 7:9
),
vars =  c("a", "b")
)
browser()
}
shinyApp(ui, server)
}
data.frame(
a = 1:3,
b = 4:6,
c = 7:9
)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
length(input$latitude)
rv$currentFile()
columns.coordinates
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
if (interactive()) {
library(shiny)
library(shinyWidgets)
data("mpg", package = "ggplot2")
ui <- fluidPage(
fluidRow(
column(
width = 10, offset = 1,
panel(
selectizeGroupUI(
id = "coords",
params = list(
latitude = list(inputId = "latitude", title = "Latitude"),
longitude = list(inputId = "longitude", title = "Longitude")
)
), status = "primary"
)
)
)
)
server <- function(input, output, session) {
res_mod <- callModule(
module = selectizeGroupServer,
id = "coords",
data = data.frame(
a = 1:3,
b = 4:6,
c = 7:9
),
vars =  c("a", "b")
)
browser()
}
shinyApp(ui, server)
}
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
?eventReactive
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
5/8
17/24
1/6
4/6
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$ccurrentFile
rv$currentFile
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$fileChoices
input$latitude
fileChoices
chosenFile <- gsub(".*\\((.*)\\)","\\1", isolate(input$latitude))
fileChoices <- columns.coordinates[[chosenFile]]
fileChoices
chosenFile <- gsub(".*\\((.*)\\)","\\1", isolate(input$latitude))
fileChoices <- columns.coordinates[chosenFile]
fileChoices
rv$fileChoices
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$fileChoices
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
lonWarnings
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$warnings$latWarnings
is.null(rv$warnings$latWarnings)
rv$warnings$latWarnings
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
list(a = NULL)
list(a = NULL)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
localWarnings
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
rv$warnings$latWarnings
rv$warnings$latWarnings
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
need(rv$warnings$latWarnings, "ok")
need(!rv$warnings$latWarnings, "ok")
need(rv$warnings$latWarnings, "ok")
need(FALSE, "ok")
need(is.null(rv$warnings$latWarnings), "ok")
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev = TRUE)
gsub("columns","custom","if(isTruthy(rv$columns$geographicDescription) &&
isTruthy(rv$columns$northBoundingCoordinate) &&
isTruthy(rv$columns$southBoundingCoordinate) &&
isTruthy(rv$columns$eastBoundingCoordinate) &&
isTruthy(rv$columns$westBoundingCoordinate)
){
rv$columns$complete <- TRUE
} else {
rv$columns$complete <- FALSE
}")
cat(gsub("columns","custom","if(isTruthy(rv$columns$geographicDescription) &&
isTruthy(rv$columns$northBoundingCoordinate) &&
isTruthy(rv$columns$southBoundingCoordinate) &&
isTruthy(rv$columns$eastBoundingCoordinate) &&
isTruthy(rv$columns$westBoundingCoordinate)
){
rv$columns$complete <- TRUE
} else {
rv$columns$complete <- FALSE
}"))
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Somewhat important message",
"This is a somewhat important message.",
easyClose = TRUE,
footer = tagList(modalButton("Dismiss"), modalButton("Dismiss"))
))
})
}
)
library(shiny)
ui <- fluidPage(
actionButton("add","Add")
)
server <- function(input, output, session) {
observeEvent(input$add, {
showModal(fluidPage("ok"))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton("add","Add")
)
server <- function(input, output, session) {
observeEvent(input$add, {
showModal(fluidPage("ok"))
Sys.sleep(3)
removeModal()
})
}
shinyApp(ui, server)

data_id <- generateIdentifier(mn, scheme = "uuid")
mn <- MNode("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
dp <- new("DataPackage")
data_id <- generateIdentifier(mn, scheme = "uuid")
data_id <- generateIdentifier(mn, scheme = "uuid")
generateIdentifier(mn, scheme = "uuid")
mn
dp
data_id <- generateIdentifier(mn, scheme = "uuid")
script_id <- generateIdentifier(mn, scheme = "uuid")
metadata_id <- generateIdentifier(mn, scheme = "uuid")
vignette("dataone-overview")
vignette("dataone-federation")
options(dataone_test_token = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJodHRwOlwvXC9vcmNpZC5vcmdcLzAwMDAtMDAwMy0zNDE2LTc2NTMiLCJmdWxsTmFtZSI6IkVsaWUgQXJuYXVkIiwiaXNzdWVkQXQiOiIyMDE5LTExLTE5VDEyOjM1OjQ2LjQzMCswMDowMCIsImNvbnN1bWVyS2V5IjoidGhlY29uc3VtZXJrZXkiLCJleHAiOjE1NzQyMzE3NDYsInVzZXJJZCI6Imh0dHA6XC9cL29yY2lkLm9yZ1wvMDAwMC0wMDAzLTM0MTYtNzY1MyIsInR0bCI6NjQ4MDAsImlhdCI6MTU3NDE2Njk0Nn0.IgSgqwA8wmZFl30EjMgWOKFZyrY7RAVs7qlbPtnITV7WRt5uWFAXxiYgH27suoUANN9VMdNoshm8OInaSNwbWwD4GqUib5nL9M-pbODS4dipPLWFrWYXgxKJEXoVAYefe9FqP7x-XY1L_6hzBT9OwC479FUh_9FGzWjz_uFhQe1tRe-V8_w4yyKo3vyXwtDQLTeZZ7cQ6CJ14amid1I7qmWLFYtDHGtiWoRyhK0vX0mTsQZgvC_51uONkheUWxhHjU2IELpYGQi9EuY6tU4SzTXiPC0o37f96DMeB6KSnX7A9xgc4_FVfu2sfyF1KUGpF_PmOV20hSrKN_r31Aclnw")
mn <- MNode("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
dp <- new("DataPackage")
dp
data_id <- generateIdentifier(mn, scheme = "uuid")
script_id <- generateIdentifier(mn, scheme = "uuid")
metadata_id <- generateIdentifier(mn, scheme = "uuid")
emlFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/eml/"
emlFile <- "edi.300.2.xml"
doc <- read_eml(paste0(emlFolder, emlFile))
doc <- read_eml(paste0(emlFolder, emlFile))
library(dataone)
library(datapack)
library(EML)
doc <- read_eml(paste0(emlFolder, emlFile))
doc$packageId <- metadata_id
doc$system <- mn@identifier
doc$dataset$dataTable$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
data_id)
# set url for script
doc$dataset$otherEntity$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
script_id)
write_eml(doc, "files/complex_example.xml") # save?
getwd()
write_eml(doc, "~/.pndb-cache/EML/edi.300.2.xml")
# Add the metadata document to the package
metadataObj <- new("DataObject",
id = metadata_id,
format ="eml://ecoinformatics.org/eml-2.1.1",
filename = "~/.pndb-cache/EML/edi.300.2.xml")
# Add the metadata document to the package
metadataObj <- new("DataObject",
id = metadata_id,
format ="eml://ecoinformatics.org/eml-2.1.1",
filename = "~/.pndb-cache/EML/edi.300.2.xml")
dp <- addMember(dp, metadataObj)
dp
dataFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/data_objects"
dataFiles <- dir(dataFolder)
dataFiles
data_id
doc$dataset$dataTable$physical$distribution$online$url
devtools::install_github("benmarwick/rrtools")
devtools::load_all()
runMetashark()
?assMember
?addMember
doc
doc$dataset$dataTable$entityName
doc$dataset$dataTable$entityDescription
doc$dataset$dataTable$physical$distribution$online$url
attr(doc$dataset$dataTable)
attributes(doc$dataset$dataTable)
attributes(doc$dataset$dataTable$physical)
rm(list = ls())
EML::read_eml("~/Documents/PNDB/EML_cases/CES2_Porcher/CES2_EP_File/eml/edi.300.4.xml")
porcher.eml <- EML::read_eml("~/Documents/PNDB/EML_cases/CES2_Porcher/CES2_EP_File/eml/edi.300.4.xml")
porcher.eml$dataset$dataTable$entityName
porcher.eml$dataset$title
porcher.eml$dataset$otherEntity
porcher.eml$packageId
porcher.eml <- EML::read_eml("~/Documents/PNDB/EML_cases/CES2_Porcher/CES2_EP_File/eml/edi.300.41.xml")
porcher.eml$packageId
porcher.eml$dataset$dataTable
porcher.eml$dataset$dataTable$entityName
names(porcher.eml$dataset$dataTable)
porcher.eml$dataset$dataTable$entityDescription
porcher.eml$dataset$dataTable$attributeList
porcher.eml$dataset$dataTable$attributeList$attribute
porcher.eml$dataset$dataTable$numberOfRecords
edi.300.41 <- EML::read_eml("~/Documents/PNDB/EML_cases/CES2_Porcher/CES2_EP_File/eml/edi.300.41.xml")
edi.300.4 <- EML::read_eml("~/Documents/PNDB/EML_cases/CES2_Porcher/CES2_EP_File/eml/edi.300.4.xml")
rm(porcher.eml)
identical(edi.300.4,edi.300.41)
View(edi.300.4)
View(edi.300.41)
identical(edi.300.41[["dataset"]][["dataTable"]],edi.300.4[["dataset"]][["dataTable"]]
)
identical(edi.300.41[["dataset"]][["otherEntity"]],edi.300.4[["dataset"]][["otherEntity"]])
runMetashark()
edi.300.1  <- read_eml("~/Documents/PNDB/EML_cases/CES1_Ronfort_Vigouroux/CES1_JR_YV_File/eml/edi.300.1.xml")
edi.300.1$dataset$dataTable
names(edi.300.1$dataset$dataTable)
length(edi.300.1$dataset$dataTable)
View(edi.300.1$dataset$dataTable)
edi.300.1$dataset$dataTable[[1]]$entityName
edi.300.1$dataset$dataTable[[1]]$entityDescription
edi.300.1$dataset$dataTable[[1]]$physical$objectName
rm(list=ls())
dir.create("~/.pndb-cache/EML/", recursive = TRUE)
emlFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/eml/"
emlFile <- "edi.300.2.xml"
dataFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/data_objects"
dataFiles <- dir(dataFolder)
library(dataone)
library(datapack)
library(EML)
options(dataone_test_token = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJodHRwOlwvXC9vcmNpZC5vcmdcLzAwMDAtMDAwMy0zNDE2LTc2NTMiLCJmdWxsTmFtZSI6IkVsaWUgQXJuYXVkIiwiaXNzdWVkQXQiOiIyMDE5LTExLTE5VDEyOjM1OjQ2LjQzMCswMDowMCIsImNvbnN1bWVyS2V5IjoidGhlY29uc3VtZXJrZXkiLCJleHAiOjE1NzQyMzE3NDYsInVzZXJJZCI6Imh0dHA6XC9cL29yY2lkLm9yZ1wvMDAwMC0wMDAzLTM0MTYtNzY1MyIsInR0bCI6NjQ4MDAsImlhdCI6MTU3NDE2Njk0Nn0.IgSgqwA8wmZFl30EjMgWOKFZyrY7RAVs7qlbPtnITV7WRt5uWFAXxiYgH27suoUANN9VMdNoshm8OInaSNwbWwD4GqUib5nL9M-pbODS4dipPLWFrWYXgxKJEXoVAYefe9FqP7x-XY1L_6hzBT9OwC479FUh_9FGzWjz_uFhQe1tRe-V8_w4yyKo3vyXwtDQLTeZZ7cQ6CJ14amid1I7qmWLFYtDHGtiWoRyhK0vX0mTsQZgvC_51uONkheUWxhHjU2IELpYGQi9EuY6tU4SzTXiPC0o37f96DMeB6KSnX7A9xgc4_FVfu2sfyF1KUGpF_PmOV20hSrKN_r31Aclnw")
mn <- MNode("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
dp <- new("DataPackage")
eml <- read_eml(paste0(emlFolder, emlFile))
data_id <- generateIdentifier(mn, scheme = "uuid")
script_id <- generateIdentifier(mn, scheme = "uuid")
metadata_id <- generateIdentifier(mn, scheme = "uuid")
eml$packageId <- metadata_id
eml$system <- mn@identifier
doc$dataset$dataTable$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
data_id)
eml$dataset$dataTable$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
data_id)
# set url for script
eml$dataset$otherEntity$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
script_id)
write_eml(eml, paste0(emlFolder, emlFile))
# Generate metadata id
# metadata_id <- generateIdentifier(mn, scheme = "uuid")
# Add the metadata document to the package
metadataObj <- new("DataObject",
id = metadata_id,
format ="eml://ecoinformatics.org/eml-2.1.1",
filename = paste0(emlFolder, emlFile))
dp <- addMember(dp, metadataObj)
# create an id per data file
# data_id <- generateIdentifier(mn, scheme = "uuid")
# create the proper DataObject
dataObj <- new("DataObject",
id = data_id,
format ="text/csv", # detect format among: https://cn.dataone.org/cn/v2/formats
filename = paste0(dataFolder, dF))
# create an id per data file
# data_id <- generateIdentifier(mn, scheme = "uuid")
# create the proper DataObject
dataObj <- new("DataObject",
id = data_id,
format ="text/csv", # detect format among: https://cn.dataone.org/cn/v2/formats
filename = paste0(dataFolder, dataFiles))
eml$dataset$dataTable$physical$objectName
dataFiles
dataFiles <- dir(dataFolder)[1]
# create an id per data file
# data_id <- generateIdentifier(mn, scheme = "uuid")
# create the proper DataObject
dataObj <- new("DataObject",
id = data_id,
format ="text/csv", # detect format among: https://cn.dataone.org/cn/v2/formats
filename = paste0(dataFolder, dataFiles))
dataFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/data_objects/"
# create an id per data file
# data_id <- generateIdentifier(mn, scheme = "uuid")
# create the proper DataObject
dataObj <- new("DataObject",
id = data_id,
format ="text/csv", # detect format among: https://cn.dataone.org/cn/v2/formats
filename = paste0(dataFolder, dataFiles))
# add data
dp <- addMember(dp, dataObj)
dp
rm(list=ls(name = ))
dir.create("~/.pndb-cache/EML/", recursive = TRUE)
emlFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/eml/"
emlFile <- "edi.300.2.xml" # unique
dataFolder <- "/home/pndb-elie/Documents/PNDB/EML_cases/CES1_Rougerie/CES1_RR_File/data_objects/"
dataFiles <- dir(dataFolder)[1]
# scriptFolder
# scriptFiles
library(dataone)
library(datapack)
library(EML)
options(dataone_test_token = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJodHRwOlwvXC9vcmNpZC5vcmdcLzAwMDAtMDAwMy0zNDE2LTc2NTMiLCJmdWxsTmFtZSI6IkVsaWUgQXJuYXVkIiwiaXNzdWVkQXQiOiIyMDE5LTExLTE5VDEyOjM1OjQ2LjQzMCswMDowMCIsImNvbnN1bWVyS2V5IjoidGhlY29uc3VtZXJrZXkiLCJleHAiOjE1NzQyMzE3NDYsInVzZXJJZCI6Imh0dHA6XC9cL29yY2lkLm9yZ1wvMDAwMC0wMDAzLTM0MTYtNzY1MyIsInR0bCI6NjQ4MDAsImlhdCI6MTU3NDE2Njk0Nn0.IgSgqwA8wmZFl30EjMgWOKFZyrY7RAVs7qlbPtnITV7WRt5uWFAXxiYgH27suoUANN9VMdNoshm8OInaSNwbWwD4GqUib5nL9M-pbODS4dipPLWFrWYXgxKJEXoVAYefe9FqP7x-XY1L_6hzBT9OwC479FUh_9FGzWjz_uFhQe1tRe-V8_w4yyKo3vyXwtDQLTeZZ7cQ6CJ14amid1I7qmWLFYtDHGtiWoRyhK0vX0mTsQZgvC_51uONkheUWxhHjU2IELpYGQi9EuY6tU4SzTXiPC0o37f96DMeB6KSnX7A9xgc4_FVfu2sfyF1KUGpF_PmOV20hSrKN_r31Aclnw")
mn <- MNode("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
dp <- new("DataPackage")
data_id <- generateIdentifier(mn, scheme = "uuid")
script_id <- generateIdentifier(mn, scheme = "uuid")
metadata_id <- generateIdentifier(mn, scheme = "uuid")
eml <- read_eml(paste0(emlFolder, emlFile))
eml$packageId <- metadata_id
eml$system <- mn@identifier
eml$dataset$dataTable$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
data_id)
# set url for script
eml$dataset$otherEntity$physical$distribution$online$url <- paste0(mn@endpoint,
"object/",
script_id)
write_eml(eml, paste0(emlFolder, emlFile))
# Generate metadata id
# metadata_id <- generateIdentifier(mn, scheme = "uuid")
# Add the metadata document to the package
metadataObj <- new("DataObject",
id = metadata_id,
format ="eml://ecoinformatics.org/eml-2.1.1",
filename = paste0(emlFolder, emlFile))
dp <- addMember(dp, metadataObj)
# create an id per data file
# data_id <- generateIdentifier(mn, scheme = "uuid")
# create the proper DataObject
dataObj <- new("DataObject",
id = data_id,
format ="text/csv", # detect format among: https://cn.dataone.org/cn/v2/formats
filename = paste0(dataFolder, dataFiles))
# add data
dp <- addMember(dp, dataObj, mo = metadataObj)
dp
packageId <- uploadDataPackage(d1c, dp, public = TRUE)
d1c@mn@identifier
mn@identifier
d1c@mn@identifier <- mn@identifier
packageId <- uploadDataPackage(d1c, dp, public = TRUE)
d1c@mn@APIversion
d1c@mn <- mn
packageId <- uploadDataPackage(d1c, dp, public = TRUE)
devtools::load_all(); runMetashark
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
input$side_menu
input$side_menu <- "appOptions"
updateTabItems(session, "side_menu", "appOptions")
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
show("shiny-tab-appOptions")
?new
me
library(EML)
devtools::load_all(); runMetashark()
show("appOptions")
show("tab-appOptions")
show("shiny-tab-appOptions")
hide("shiny-tab-appOptions")
devtools::load_all(); runMetashark()
show("aaa")
show("tab-aaa")
show("side_menu-aaa")
devtools::load_all(); runMetashark()
show("aaa")
session$ns
session$ns("a")
show("aaa")
show("appOptions")
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all()
runMetashark()
runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
dataone::getTokenInfo()
dataone::getTokenInfo()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
names(input)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
multiFIlesInputUI <- function(id, helpText = NULL){
ns <- NS(id)
fluidPage(
h4("Data files"),
tags$p(helpText),
div(
shinyFilesButton(ns("add_files"),
"Load files",
"Select data file(s) from your dataset",
multiple = TRUE,
icon = icon("plus-circle")),
style = "display: inline-block; vertical-align: top;"
),
actionButton(ns("remove_files"),"Remove",
icon = icon("minus-circle"),
class = "redButton"),
uiOutput(ns("files"))
)
}
multiFIlesInput <- fucntino(input, output, session){
rv <- reactiveValues(
# to save
files = data.frame()
# local only
)
volumes <- c(Home = fs::path_home(), getVolumes()())
# Add data files
shinyFileChoose(input, "add_files",
roots = volumes,
# defaultRoot = HOME,
session = session)
observeEvent(input$add_files,{
# validity checks
req(input$add_files)
# actions
loadedFiles <- as.data.frame(
parseFilePaths(volumes, input$add_files)
)
if(identical(rv$files, data.frame()))
rv$files <- loadedFiles
else{
for(filename in loadedFiles$name){
if(!grepl("\\.",filename))
message(filename," is a folder or misformed file.")
else
rv$files <- unique(rbind(rv$files,
loadedFiles[loadedFiles$name == filename,])
)
}
}
})
# Remove data files
observeEvent(input$remove_files, {
# validity check
req(input$select_files)
# actions
rv$files <- rv$files[
rv$files$name != input$select_files
,]
})
# Display data files
output$files <- renderUI({
# actions
if(!identical(rv$files, data.frame()) &&
!is.null(rv$files)){
checkboxGroupInput(ns("select_files"),
"Select files to delete (all files here will be kept otherwise)",
choices = rv$files$name)
}
else{
return(NULL)
}
})
}
rm(list=ls())
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){callModule(multiFIlesInput,"e")})
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
source('~/Softwares/Gits/MetaShARK-v2/R/utils/utils-multiFilesInput.R')
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
shinyApp(ui = fluidPage(multiFIlesInputUI("e")),
server = function(input,output,session){
callModule(multiFIlesInput,"e")
})
list(md = NULL)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools
devtools::load_all()
?hr()
devtools::load_all(); runMetashark(dev=TRUE)
names(input)
ns("")
session$ns("")
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
endpoints <- data.frame(
endpoint = c("PNDB"),
URL = c("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/")
)
endpoints
fwrite(endpoints, "resources/registeredEndpoints.txt", sep = "\t")
endpoints <- data.frame(
mn = c("PNDB"),
URL = c("https://openstack-192-168-100-67.genouest.org/metacat/d1/mn/v2/"),
cn = c("STAGING")
)
fwrite(endpoints, "resources/registeredEndpoints.txt", sep = "\t")
fread("resources/registeredEndpoints.txt")
rE <- fread("resources/registeredEndpoints.txt")
paste("Current endpoint:", rE[match(endpoint(), rE$mn), "URL"])
paste("Current endpoint:", rE[match("PNDB", rE$mn), "URL"])
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
rvFiles$md()
rvFiles$md() == 1
devtools::load_all(); runMetashark(dev=TRUE)
ls()
rm(list = ls())
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
endpoint()
registeredEndpoints
devtools::load_all(); runMetashark(dev=TRUE)
data.frame()
dim(data.frame())
dim(data.frame())
devtools::load_all(); runMetashark(dev=TRUE)
rvFiles$md()
dim(rvFiles$md())
dim(rvFiles$md())[1]
dim(rvFiles$md())[1] != 1 ||
dim(rvFiles$data)[1] < 1
dim(rvFiles$data)[1]
rvFiles$data
devtools::load_all(); runMetashark(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
?getData
dataone::getTokenInfo()
dataone::getTokenInfo(.Options)
dataone::getTokenInfo(options())
dataone::getTokenInfo(options(dataone_token))
options(dataone_token)
options(dataone_test_token = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJodHRwOlwvXC9vcmNpZC5vcmdcLzAwMDAtMDAwMy0zNDE2LTc2NTMiLCJmdWxsTmFtZSI6IkVsaWUgQXJuYXVkIiwiaXNzdWVkQXQiOiIyMDE5LTExLTI1VDEzOjMxOjU5Ljk1MyswMDowMCIsImNvbnN1bWVyS2V5IjoidGhlY29uc3VtZXJrZXkiLCJleHAiOjE1NzQ3NTM1MTksInVzZXJJZCI6Imh0dHA6XC9cL29yY2lkLm9yZ1wvMDAwMC0wMDAzLTM0MTYtNzY1MyIsInR0bCI6NjQ4MDAsImlhdCI6MTU3NDY4ODcxOX0.k8g_fcu1yV-EaTY6Y8gutP5Zb1oQv7Eg6fz8roFKnvva5Ph6MmvbAfh8tcFDuE4Cimx5mOeQtxqKDtxBsAlgrg8QSVhAyzA13dJ269D6anYTzR23F4ZFB--4rNlfiuSPWKP4VqkLlPpOTREUAVV_4LWJ-cdheAq6UKaabuh5l6sjvuM1Qmdgwxr176GrwxYzMD1UTUkEK0_RiKDg1dHHuugSf8ukVreRjEe6BRyCD5Ifczrpx-_fTS_S3P_978PVcd0DdmJdceWercP47YnMF0pSV58aWNgHRRihqxQw3676uwDMemTMy1tLLQ3aEn1Kksj50tW0s-5lP6o-uGxDew")
options(dataone_token)
options(dataone_test_token)
options("dataone_test_token")
options("dataone_token")
options(dataone_test_token = NULL)
options("dataone_token")
options("dataone_test_token")
renderText("a")
renderText("a")()
renderText("<b>a</b>")()
dataone::generateIdentifier
standardGeneric("generateIdentifier")
standardGeneric("generateIdentifier")
dataone::standardGeneric("generateIdentifier")
?standardGeneric
registeredEndpoints <- fread("resources/registeredEndpoints.txt")
getwd()
registeredEndpoints <- data.table::fread("resources/registeredEndpoints.txt")
options("dataone_token")
options("dataone_test_token")
registeredEndpoints$URL
registeredEndpoints$URL <- "https://openstack-192-168-100-101.genouest.org/metacatui"
data.table::fwrite(registeredEndpoints, "resources/registeredEndpoints.txt")
dataone::addMember
datapack::addMember
class("DataObject")
devtools::load_all(); runMetaShARK(dev=TRUE)
devtools::load_all(); runMetashark(dev=TRUE)
EML::eml$otherEntity
args(EML::eml$otherEntity())
args(EML::eml$otherEntity)
str(args(EML::eml$otherEntity))
args(EML::eml$otherEntity)
library(dataone)
mn <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2/")
d1c <- D1Client("STAGING", mn)
d1c@mn@identifier
devtools::load_all(); runMetashark(dev=TRUE)
d1c@mn
?"D1Client-initialize"
D1Client
cn <- CNode("STAGING"); ln <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2")
d1c <- new("D1Client", cn, mn)
d1c@mn@identifier
cn <- CNode("STAGING"); mn <- MNode("https://openstack-192-168-100-101.genouest.org/metacat/d1/mn/v2")
d1c <- new("D1Client", cn, mn)
d1c@mn@identifier
EML::shiny_attributes()
datapack
?datapack::DataPackage
library(datapack)

actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful"),
actionButton("deve")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
observeEvent(input$dev, {
browser()
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful"),
actionButton("dev", "dev")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
observeEvent(input$dev, {
browser()
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
input$txt
input$txt
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful"),
actionButton("dev", "dev")
)
# Server logic
server <- function(input, output, session) {
rv = reactiveValues()
observeEvent(input$txt, {
rv$txt <- input$txt
})
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
rv$txt <- NULL
})
observeEvent(input$dev, {
browser()
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
rv$txt
rv$txt
rv$txt
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv$personnel)
sapply(names(rv$personnel), function(rvid){
# rv[[rvid]] <<- rv[[rvid]][-ind]
rv[[rvid]][ind] <<- NULL
})
ind <- match(ref, rv$id)
sapply(names(rv$personnel), function(rvid){
# rv[[rvid]] <<- rv[[rvid]][-ind]
rv[[rvid]][ind] <<- NULL
})
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv$personnel)
rv$personnel$id
ref
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv$personnel)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv$personnel)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv$personnel)
printReactiveValues(rv)
ref
names(input)
ns("a")
site_id
rv
printReactiveValues(rv)
ref %in% rv$id
ref
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
printReactiveValues(rv)
printReactiveValues(rv$personnel)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
max(rv$id)
rv$id
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv$personnel
printReactiveValues(rv$personnel)
input$addui
ref
ref
input$addui
rv$id
1 > rv$id
max(rv$id)
isTruthy(rv$id)
# Fetch correct index
maxid <- if(isTruthy(rv$id)) max(rv$id) else 0
maxid
maxid <- if(isTruthy(rv$id)) max(rv$id) else 0
maxid
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
maxid
ref
localRV
printReactiveValues(localRV)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
maxid
max(list(1,2))
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
maxid
printReactiveValues(rv$personnel)
maxid
printReactiveValues(rv)
rv$id
maxid
ref
ref
maxid
printReactiveValues(rv)
reactiveValuesToList(rv)
printReactiveValues(rv)
as.data.frame(printReactiveValues(rv))
printReactiveValues(rv$personnel)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
ind
localRV
printReactiveValues(localRV)
ind
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
rv[[rvid]][ind]
-1*rv[[rvid]][ind]
rv[[rvid]]
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
-1*rv[[rvid]][[ind]]
printReactiveValues(rv$personnel)
input[["nav-nextTab"]]
input[["nav-quitTab"]]
input[["nav-quit"]]
rv$abstract$content
rv$methods$content
data.frame(
keyword = rv$keywords$keywords,
keywordThesaurus = rv$keywords$keywordsThesaurus
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
test <- printReactiveValues(rv$personnel) %>% as.data.frame
test
test$role %>% !isTruthy
test$role %>% select(!isTruthy)
test$role
test
is.data.frame(test)
test$role
which(isTruthy(test$role))
data.frame(a = 1:5, b = 5:9)$a
test
test[[-id]]
test %>% select(-id)
printReactiveValues
test <- printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id)
test
cols <- c("givenName","middleInitial","surName","organizationName","electronicMailAddress","userId","role","projectTitle","fundingAgency","fundingNumber")
test[, cols]
colnames(test) %in% cols
colnames(test) %in% cols
cols %in% colnames(test)
test$role == "(other)"
which(test$role == "(other)")
test$role[test$role == "(other)"]
?dplyr::replace
?replace
test$role %>% replace(., which(test$role == "(other)"), test$`role-other`[list])
test$role %>% replace(., list = which(test$role == "(other)"), test$`role-other`[list])
test$role %>% replace(., which(test$role == "(other)"), test$`role-other`[which(test$role == "(other)")])
test
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role)
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(., test$role == "creator", "test")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(., which(test$role == "creator"), "test")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(., which(. == "creator"), "test")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
browser()
.
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(., which(.$role == "creator"), "1")
which(test$role == "creator")
as.list(which(test$role == "creator"))
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(.$role, which(.$role == "creator"), "1")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(
x = .$role,
list = which(.$role == "creator"),
value = "1")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
select(role) %>%
replace(
x = .$role,
list = which(.$role == "creator"),
value = "1"
)
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
replace(
x = .$role,
list = which(.$role == "creator"),
value = "1"
)
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
replace(
list = which(.$role == "creator"),
value = "1"
)
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
browser() %>%
replace(
list = which(.$role == "creator"),
value = "1"
)
.
.$role
which(.$role == "creator")
which(.$role == "contact")
printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id) %>%
replace(
list = which(.$role == "contact"),
value = "1"
)
test <- printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id)
test$role %>%
replace(
.,
which(test$role == "(other)"),
test$`role-other`[which(test$role == "(other)")]
)
test$role %>%
replace(
.,
which(test$role == "creator"),
test$`role-other`[which(test$role == "(other)")]
)
test$role %>%
replace(
.,
which(test$role == "creator"),
"test$`role-other`[which(test$role == "(other)")]"
)
test$role %>%
replace(
.,
which(test$role == "creator"),
"z"
)
test$role %>%
replace(
.,
which(test$role == "(other)"),
test$`role-other`[which(test$role == "(other)")]
)
colnames(tset)
colnames(test)
colnames(test[,cols])
?reorder
test <- printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id)
test$role %>%
replace(
.,
which(test$role == "(other)"),
test$`role-other`[which(test$role == "(other)")]
)
cols <- c("givenName","middleInitial","surName","organizationName","electronicMailAddress","userId","role","projectTitle","fundingAgency","fundingNumber")
test <- test[,cols]
test
savevar$emlal$selectDP$dp_path
fread("/home/pndb-elie/dataPackagesOutput/emlAssemblyLine/test_emldp/personnel.txt")
dim(test)
args("make_eml")
args(make_eml)
library(EMLassemblyline)
args("make_eml")
. = 1
.
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
?writeLines
?write.text
install.packages("SparlR")
install.packages("SparkR")
remove.packages("SparkR")
?fwrite
?missing
missing(tet)
dir.exists("./a")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
force(apg_families)
force(apg_families)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
data.frame(
keyword = rv$keywords$keywords,
keywordThesaurus = rv$keywords$keywordsThesaurus
)
#        keyword = rv$keywords$keywords
keywordThesaurus = rv$keywords$keywordsThesaurus
keyword = rv$keywords$keywords
#        keywordThesaurus = rv$keywords$keywordsThesaurus
keyword
keywordThesaurus
input$`thesaurus-for-0000-0002-8504-068X`
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
data.frame(
keyword = rv$keywords$keywords,
keywordThesaurus = rv$keywords$keywordsThesaurus
)
personnel <- printReactiveValues(rv$personnel) %>%
as.data.frame %>%
select(-id)
personnel$role %>%
replace(
.,
which(personnel$role == "(other)"),
personnel$`role-other`[which(personnel$role == "(other)")]
)
cols <- c("givenName","middleInitial","surName","organizationName","electronicMailAddress","userId","role","projectTitle","fundingAgency","fundingNumber")
personnel <- personnel[,cols]
personnel
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
personel %>% lapply(unlist)
personnel %>% lapply(unlist)
a = personnel %>% lapply(unlist)
a
personnel %>% lapply(unlist) %>% as.data.frame
personnel %>% lapply(unlist) %>% as.data.frame(stringsAsFactors = FALSE)
replace(NA, which(is.na(NA)), "a")
input$`1-middleInitial`
rv$personnel$middleInitial
globals$PATTERNS$NAME
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
personnel()
personnel
fwrite(
personnel,
paste0(
savevar$emlal$selectDP$dp_path,
"/personnel.txt"
)
)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
.$DPfiles$dp_data_files
.$DPfiles$dp_data_files$datapath
dirname(.$DPfiles$dp_data_files$datapath)
unique(dirname(.$DPfiles$dp_data_files$datapath))
View(.)
reactiveValuesToList(.)
View(reactiveValuesToList(.))
View(printReactiveValues(.))
.$templateDP
.$createDP$dp_data_files
.$step
.$selectDP
.$selectDP$dp_name
basename(.$DPfiles$dp_data_files$datapath)
?make_eml
make_eml
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
rm(list = ls())
Date()
date()
is.Date("a")
Sys.Date()
Sys.Date()-1
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
grepl(" ", "a ")
grepl("^[[:alnum:]_- :,]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_- \:,]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_- \\:,]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_-:, ]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_- ]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_-\ ]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_-\\ ]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]_-\\ ]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]\\ _-]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]\\ _-.]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]\\ \\._-]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]\\ \\.,_-]+$", "A long short story: my life in, about, 356 hours.")
grepl("^[[:alnum:]\\ \\.,:_-]+$", "A long short story: my life in, about, 356 hours.")
gsub("", "\"", " .,:_-")
gsub("", "\"1\"", " .,:_-")
gsub("1", " ", "\" \"1\".\"1\",\"1\":\"1\"_\"1\"-\"")
cat(gsub("1", " ", "\" \"1\".\"1\",\"1\":\"1\"_\"1\"-\""))
gsub("1", " ", "\" \"1\".\"1\",\"1\":\"1\"_\"1\"-\"")
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
golem::document_and_reload(); MetaShARK::runMetashark(dev=TRUE)
savevar$emlal$Attributes
savevar$emlal$Attributes$decomp.csv
savevar$emlal$Attributes$Nitrogen_fixation.csv
savevar$emlal$Attributes$decomp.csv
rv$attributesTable
file.exists("/home/pndb-elie/dataPackagesOutput/emlAssemblyLine/Test_emldp/Nitrogen_fixation.csv")

golem::fill_desc(
pkg_name = "MetaShARK", # The Name of the package containing the App
pkg_title = "metashark", # The Title of the package containing the App
pkg_description = "MetaShARK is a Shiny application allowing its
user to fill metadata for a given ecological
dataset of his owns. The data description relies
on Ecological Metadata Language (EML).", # The Description of the package containing the App
author_first_name = "Elie", # Your First Name
author_last_name = "ARNAUD",  # Your Last Name
author_email = "earnaud@outlook.com",   # Your Email
repo_url = "https://github.com/earnaud/MetaShARK.git" # The (optional) URL of the GitHub Repo
)
getwd()
golem::set_golem_options()
usethis::use_readme_rmd( open = FALSE )
{usethis}
usethis
## 1.3 - Add a data-raw folder
##
## If you have data in your package
usethis::use_data_raw( name = "resources", open = FALSE ) # Change "my_dataset"
usethis::use_data_rax
usethis::use_data_raw
golem::use_recommended_tests
normalizePath
interactive()
golem::use_recommended_tests()
golem::use_recommended_deps()
# Add helper functions
golem::use_utils_ui()
golem::use_utils_server()
# You're now set!
# go to dev/02_dev.R
rstudioapi::navigateToFile( "dev/02_dev.R" )
## 2.1 Add modules
##
golem::add_module( name = "modules/my_first_module" ) # Name of the module
## 3.1 Vignette
usethis::use_vignette("MetaShARK")
# You're now set!
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
# You're now set!
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
install.packages("rhub")
devtools::test()
#' Run the Shiny Application
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(...) {
with_golem_options(
app = shinyApp(ui = app_ui, server = app_server),
golem_opts = list(...)
)
}
run_app()
test_check("MetaShARK")
library(testthat)
library(MetaShARK)
test_check("MetaShARK")
run_app()
MetaShARK::runMetashark
source('~/Softwares/MetaShARK/R/run_app.R')
library(MetaShARK)
#' Run the Shiny Application
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
runMetashark <- function(...) {
with_golem_options(
app = shinyApp(ui = app_ui, server = app_server),
golem_opts = list(...)
)
}
library(MetaShARK)
library(MetaShARK)
MetaShARK::run_app()
getwd()
build(,)
build
build()
document_and_reload()
runMetashark()
document_and_reload()
document_and_reload()
runMetashark()
runMetashark()
document_and_reload()
runMetashark()
document_and_reload()
runMetashark()
?golem_add_external_resources
?golem::golem_add_external_resources
golem::golem_add_external_resources
library(golem)
golem::golem_add_external_resources
getwd()
document_and_reload
document_and_reload()
runMetashark()
document_and_reload()
runMetashark()
document_and_reload()
runMetashark()
document_and_reload()
runMetashark()
?runMetashark
document_and_reload()
?runMetashark
document_and_reload()
library(golem)
document_and_reload()
runMetashark()
document_and_reload()
data()
??build
getwd()
document_and_reload
load_all()
??load_all
devtools::load_all()
devtools::load_all()
test <- readRDS("resources/backboneGuideline.RData")
getwd()
backboneGuideline <- test
usethis::use_data(backboneGuideline)
docGuideline <- readRDS("resources/docGuideline.RData"); usethis::use_data(docGuideline)
systemGuideline <- readRDS("resources/systemGuideline.RData"); usethis::use_data(systemGuideline)
rm(list = ls())
devtools::load_all()
runMetashark()
devtools::load_all()
runMetashark()
devtools::load_all()
runMetashark()
devtools::load_all()
runMetashark()
obseobserveEvent
devtools::load_all()
version
install.packages()
installed.packages()
installed.packages()[,c(1,16)]
installed.packages()["golem",]
installed.packages()["golem",1:3]
installed.packages()["golem",1:5]
installed.packages()["golem",1:7]
installed.packages()["golem",-6]
### Global variables ----
HOME = fs::path_home()
DP.PATH <- paste0(HOME,"/dataPackagesOutput/emlAssemblyLine/")
DP.PATH
golem::use_favicon
cat_line
??cat_line
devtools::load_all()
devtools::load_all()
??cat_line
devtools::load_all()
runMetashark()
document_and_reload()
golem::document_and_reload()
?runMetashark
devtools::load_all()
?runMetashark
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
??ReadBib
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
loadedNamespaces()
unloadNamespace()
golem::document_and_reload()
golem::document_and_reload()
runMetashark()
MetaShARK
?MetaShARK::a
MetaShARK::a
nsIndex <- readRDS("resources/nsIndex.RData"); usethis::use_data(nsIndex)
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
?semanticPage
?shiny::semanticPage
shiny::semanticPage
golem::document_and_reload()
runMetashark()
aaa=readRDS("data/nsIndex.rda")
# prepare variables
tree <- load("data/docGuideline.rda")
View(tree)
golem::document_and_reload()
devtools::load_all()
traceback()
devtools::load_all()
View(readRDS("resources/backboneGuideline.RData"))
traceback()
devtools::load_all()
runMetashark()
traceback()
runMetashark()
traceback()
devtools::load_all()
runMetashark()
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
names(input)
devtools::load_all(); runMetashark()
devtools::load_all(); runMetashark()
?shiny::tabsetPanel
?shinydashboard::sidebarMenu()
golem::document_and_reload()
golem::document_and_reload()
warnings()
.libPaths()
sapply(.libPaths(), dir)
runMetashark()
golem::document_and_reload()
runMetashark()*
1
runMetashark()*
2
runMetashark()
golem::document_and_reload()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
runMetashark()*
0
0
runMetashark()
names(input)
input$side_menu
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload()
runMetashark()
golem::document_and_reload(): runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
runMetashark()
names(input)
input$side_menu
out
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
HTML(NULL)
HTML(NA)
?ifelse
... = a
...
?...
help("...")
"...*"
"..."
column(2, NULL)
golem::document_and_reload()
warnings()
traceback()
golem::document_and_reload()
runMetashark()
golem::document_and_reload(); runMetashark()
savevar
typeof(savevar)
is.reactive(savevar)
typeof(initReactive())
is.reactive(initReactive())
is.reactivevalues(initReactive())
is.reactivevalues(savevar)
tt = initReactive()
tt$emlal$step
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
rv$dp_list
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
?switch
is.reactivevalues(savevar)
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
cat("Type:",typeof(savevar),
"\nReactive?:",is.reactive(savevar),
"\nRV?:",is.reactivevalues(savevar), "\n")
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
savevar$emlal$step
globals$EMLAL$NAVIGATE
globals$EMLAL$NAVIGATE
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
?tagList
tagList(div("a"), class ="t")
div(div("a"), class ="t")
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
prevTabButton(NS("id"))
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
library(shiny)
innerUI <- function(id) {
ns <- NS(id)
tagList(
"UI content",
textOutput(ns("test"))
)
}
inner <- function(input, output, session) {
cat("output ID:", session$ns("test"),"\n")
output$test <- renderText("output content")
}
outerUI <- function(id) {
ns <- NS(id)
actionButton(ns("add"), "add")
}
outer <- function(input, output, session) {
setBookmarkExclude("add")
add_ui <- function() {
insertUI(
selector =  "body",
where = "beforeEnd",
innerUI(session$ns("mod"))
)
callModule(inner, "mod")
}
observeEvent(input$add, add_ui())
onRestore(function(state) {
add_ui()
})
}
ui <- function(req) {
fluidPage(
bookmarkButton(), br(),
outerUI("outer")
)
}
server <- function(input, output, session) {
ns <- session$ns
callModule(outer, "outer")
}
shinyApp(ui, server, enableBookmarking = "server")
NS("id")
NS("id")("i")
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
golem::document_and_reload(); runMetashark()
savevar$emlal$step
savevar$emlal <- initReactive("emlal", savevar)
savevar$emlal$step
path
dir(path)
dp
paste0(path,"/",dp,".rds")
test = readRDS(paste0(path,"/",dp,".rds"))
file.exists("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
test = readRDS("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
test = fread("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
test = data.table::fread("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
save(savevar, file = "savevar.rds")
test = load("savevar.rds")
test
rm(test)
file.remove("savevar.rds")
"/home/elie/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds"
file.exists("/home/elie/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
readRDS("/home/elie/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
traceback()
readRDS("~/dataPackagesOutput/emlAssemblyLine/test_emldp/test.rds")
traceback()
readRDS
gzfile
gzcon
version()
R
R.Version()
update.packages()

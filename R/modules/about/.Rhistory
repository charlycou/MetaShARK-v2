textOutput(ns("out"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
ns <- session$ns
roots = c(Home = HOME, getVolumes()())
shinyDirChoose(input, "dir", roots = roots)
output$out <- renderText({
parseDirPath(roots, input$dir)
})
}
shinyApp(ui, server)
library(shiny)
modui <- function(id){
ns <- NS(id)
shinyDirButton(ns("dir"),"Dir","Rid"),
textOutput(ns("out"))
}
modserver <- function(input, output, session){
ns <- session$ns
roots = c(Sys.getenv("HOME"), getVolumes()())
shinyDirChoose(input, "dir", roots = roots)
output$out <- renderText({
parseDirPath(roots, input$dir)
})
}
ui <- fluidPage(
modui("id")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
callModule(modserver, "id")
}
shinyApp(ui, server)
library(shiny)
modui <- function(id){
ns <- NS(id)
shinyDirButton(ns("dir"),"Dir","Rid"),
textOutput(ns("out"))
}
modserver <- function(input, output, session){
ns <- session$ns
roots = c(fs::path_home(), getVolumes(())
shinyDirChoose(input, "dir", roots = roots)
output$out <- renderText({
parseDirPath(roots, input$dir)
})
}
ui <- fluidPage(
modui("id")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
callModule(modserver, "id")
}
shinyApp(ui, server)
library(shiny)
modui <- function(id){
ns <- NS(id)
div(
shinyDirButton(ns("dir"),"Dir","Rid"),
textOutput(ns("out"))
)
}
modserver <- function(input, output, session){
ns <- session$ns
roots = c(fs::path_home(), getVolumes())
shinyDirChoose(input, "dir", roots = roots)
output$out <- renderText({
parseDirPath(roots, input$dir)
})
}
ui <- fluidPage(
modui("id")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
callModule(modserver, "id")
}
shinyApp(ui, server)
library(shiny)
modui <- function(id){
ns <- NS(id)
div(
shinyDirButton(ns("dir"),"Dir","Rid"),
textOutput(ns("out"))
)
}
modserver <- function(input, output, session){
ns <- session$ns
roots = c(home = fs::path_home(), base = getVolumes())
shinyDirChoose(input, "dir", roots = roots)
output$out <- renderText({
parseDirPath(roots, input$dir)
})
}
ui <- fluidPage(
modui("id")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
callModule(modserver, "id")
}
shinyApp(ui, server)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
session_info()
rm(list = ls())
library(shiny); runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
install.packages("golem")
remotes::install_github("Thinkr-open/golem")
vignette("golem")
library(shiny); runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
view(docGuideline)
View(docGuideline)
installed.packages()
names(installed.packages())
rownames(installed.packages())
install.packages("ecography")
install.packages("landscapemetrics")
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
path
sep
names(tree)
if(is.list(path))
path <- unlist(path)
# Processing
path <- unlist(strsplit(path,sep))
path = path[!path == "Root"]
while(length(path) != 0){
tree <- tree[[ path[1] ]]
path = path[-1]
}
names(tree)
names(tree)
View(systemGuideline)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
names(content)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
names(out)
out
content
out2 <- unlist(content[grepl("_annotation", attr(content, "names"))])
out2
cat(out2)
outsave <- out
out <- out2
# preprocess 'ulink' tags that require their URL attributes (R-Attributes needed)
{
ulinks.ind = which(grepl("ulink", attr(out, "names"))) # ulinks are always structured the same way
# browser()
out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 1] ] <- paste(out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 1] ], # raw text
out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 2] ], # URL
sep = "[RECOGNIZED]")
}
out
out <- out[!grepl("R-Attributes", attr(out, "names"))]
out <- sapply(out, gsub,  pattern = " +", replacement = " ")
out
out2 <- unlist(content[grepl("_annotation", attr(content, "names"))])
out <- out2
# preprocess 'ulink' tags that require their URL attributes (R-Attributes needed)
{
ulinks.ind = which(grepl("ulink", attr(out, "names"))) # ulinks are always structured the same way
# browser()
out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 1] ] <- paste(out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 1] ], # raw text
out[ ulinks.ind[1:length(ulinks.ind) %% 3 == 2] ], # URL
sep = "[RECOGNIZED]")
}
names(out)
out <- out[!grepl("R-Attributes", attr(out, "names"))]
names(out)
out[5]
systemGuideline[["12_eml-physical"]][["1_schema"]][["9_complexType:PhysicalDistributionType"]][["1_annotation"]][["1_appinfo"]][["3_description"]][["1_section"]][["2_para"]][["2_ulink"]]
systemGuideline[["2_eml-attribute"]][["1_schema"]][["11_complexType:AttributeType"]][["2_choice"]][["1_sequence"]][["1_element:attributeName"]][["1_annotation"]][["1_appinfo"]][["3_description"]][[1]]
out <- unlist(content[grepl("_annotation", attr(content, "names"))])
our[[5]]
out[[5]]
names(out)
out <- out[!grepl("R-Attributes", attr(out, "names"))]
names(out)
out[5]
out <- out[!grepl("R-Attributes", attr(out, "names"))]
out <- unlist(content[grepl("_annotation", attr(content, "names"))])
names(out)[1:10]
out[[8-11]]
out[[8:11]]
out[8:11]
cat(out[8:11])
cat(out[8:11], sep = "\n")
names(out)[8:11]
names(out)[8:12]
names(out)[8:13]
names(out)[8:12]
cat(out[8:12])
cat(out[8:12], "\n")
cat(out[8:12], sep="\n")
names(out)[8:12]
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
out
names(out)
names(out)
names(out)
out["citetitle"]
systemGuideline[["12_eml-physical"]][["1_schema"]][["9_complexType:PhysicalDistributionType"]][["1_annotation"]][["1_appinfo"]][["3_description"]][["1_section"]][["2_para"]][["2_ulink"]]
systemGuideline[["12_eml-physical"]][["1_schema"]][["9_complexType:PhysicalDistributionType"]][["1_annotation"]][["1_appinfo"]][["3_description"]][["1_section"]][["2_para"]]["2_ulink"]
out
out["citetitle"]
attr(out[grepl("[RECOGNIZED]", out)], "names")
out[grepl("[RECOGNIZED]", out)]
typeof(out)
out[which(grepl("[RECOGNIZED]", out))]
grepl("RECOGNIZED", out)
out[grepl("RECOGNIZED", out)]
attr(out[grepl("RECOGNIZED", out)], "names")
nsIndex
nsIndex$res
nsIndex["res"]
sub("https://eml.ecoinformatics.org/", "", res)
sub("https://eml.ecoinformatics.org/", "", nsIndex["res"])
sub("https://eml.ecoinformatics.org/", "", nsIndex)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
names(out)
names(out)
attr(out[grepl("[RECOGNIZED]", out)], "names")
out[grepl("[RECOGNIZED]", out)]
grepl("[RECOGNIZED]", out)
!grepl("[RECOGNIZED]", out)
out[!grepl("[RECOGNIZED]", out)]
attr(out[grepl("RECOGNIZED",out)], "names")
attr(out[grepl("[RECOGNIZED]",out)], "names")
attr(out[grepl("RECOGNIZED",out)], "names") <- "ulink"
names(out)
attr(out[grepl("RECOGNIZED",out)], "names")
names(out[grepl("RECOGNIZED",out)]) <- "ulink"
names(out)
names(out[grepl("RECOGNIZED",out)])
names(out[grepl("RECOGNIZED",out)]) <- "ulink"
names(out[grepl("RECOGNIZED",out)])
assign(names(out[grepl("RECOGNIZED",out)]),"ulink")
names(out[grepl("RECOGNIZED",out)])
c("a","a")
c("a","a") <- "a"
a = c(1,1)
a[a == 1]
a[a == 1] <- 1
a[a == 1] <- 2
a
attr(out[grepl("[RECOGNIZED]", out)], "names") <- "ulink"
out
names(out)
class(out)
typeof(out)
is.vector(out)
names(out[grepl("RECOGNIZED",out)]) <- "ulink"
out
out["unlink"]
out["citetitle"]
names(out["citetitle"]) <- "ulink"
names(out)
ind <- which(out[grepl("RECOGNIZED",out)])
ind <- which(grepl("RECOGNIZED",out))
out[ind]
names(out[ind]) <- "ulink"
names(out)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
names(ou)
names(out)
ind
names(out)[ind]
names(out)[ind] <- "ulink"
names(out)[ind]
vec[targeted]
work <- unlist(strsplit(vec[targeted],
split = "\\[RECOGNIZED]"))
work[1] <- gsub("\n", "", work[1])
work
# check for the type of ulink
ulink.type <- ifelse(grepl("^http:",work[1]), "external", "internal")
ulink.type
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub(".*/([a-zA-Z])", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub(".*/([a-zA-Z])", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub("^.*/([a-zA-Z]).*$", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub("^.*/([a-zA-Z])+.*$", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub("^.*/([a-zA-Z])+-.*$", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub("^.*/([a-zA-Z])+\\-.*$", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
vec[targeted] <- switch(ulink.type,
external = HTML(as.character(
a(work[1],
href = work[2]))
),
internal = {
eml.module.ns <- sub("(.*):.*", "\\1", work[1])
eml.module.name <- sub("^.*/([a-zA-Z]+)-.*$", "\\1", nsIndex[eml.module.ns])
HTML(as.character(
tags$b(
sub(eml.module.ns, eml.module.name, work[1])
))
)
}
)
vec[targeted]
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
## install.packages(c("shiny", "bibtex", "bib2df", "DT"))
library(shiny)
library(bib2df)
library(DT)
library(dplyr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("BibTeX"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
shiny::fileInput("fileUpload", "File", accept = ".bib")
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput("bibTable")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
get_path <- reactive({
if (is.null(input$fileUpload)) {
path <- system.file("extdata", "biblio.bib", package = "bib2df")
} else {
path <- input$fileUpload$datapath
}
path
})
get_bib <- reactive({
## insert your get bib logic here
#bibtex::read.bib()
df <- bib2df(get_path()) %>% dplyr::select(BIBTEXKEY, AUTHOR, TITLE, YEAR, JOURNAL, everything())
df$AUTHOR <- unlist(lapply(df$AUTHOR, paste, collapse = " "))
df <- df %>% arrange(AUTHOR)
return(df)
})
output$bibTable <- DT::renderDataTable({
bib <- get_bib()
bib
}, caption = get_path())
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("bib2df")
## install.packages(c("shiny", "bibtex", "bib2df", "DT"))
library(shiny)
library(bib2df)
library(DT)
library(dplyr)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("BibTeX"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
shiny::fileInput("fileUpload", "File", accept = ".bib")
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput("bibTable")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
get_path <- reactive({
if (is.null(input$fileUpload)) {
path <- system.file("extdata", "biblio.bib", package = "bib2df")
} else {
path <- input$fileUpload$datapath
}
path
})
get_bib <- reactive({
## insert your get bib logic here
#bibtex::read.bib()
df <- bib2df(get_path()) %>% dplyr::select(BIBTEXKEY, AUTHOR, TITLE, YEAR, JOURNAL, everything())
df$AUTHOR <- unlist(lapply(df$AUTHOR, paste, collapse = " "))
df <- df %>% arrange(AUTHOR)
return(df)
})
output$bibTable <- DT::renderDataTable({
bib <- get_bib()
bib
}, caption = get_path())
}
# Run the application
shinyApp(ui = ui, server = server)
library("citr")
md_cite("Michener1997", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("Michener 1997", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("Michener97", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("michener1997", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("michener97", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("michener 1997", bib_file = "Documents/Travail/Stage/Rapport/rapport.bib")
md_cite("Michener1997", bib_file = "Softwares/Gits/MetaShARK/shinyApp/modules/about/about.bib")
md_cite("michener1997", bib_file = "Softwares/Gits/MetaShARK/shinyApp/modules/about/about.bib")
md_cite("devtools", bib_file = "Softwares/Gits/MetaShARK/shinyApp/modules/about/about.bib")
md_cite(Michener1997, bib_file = "Softwares/Gits/MetaShARK/shinyApp/modules/about/about.bib")
md_cite("Michener1997", bib_file = "Softwares/Gits/MetaShARK/shinyApp/modules/about/about.bib")
setwd("Softwares/Gits/MetaShARK/shinyApp/modules/about/")
md_cite("Michener1997", bib_file = "about.bib")
install.packages("RefManageR")
install.packages("RefManageR")
library(RefManageR)
ReadBib("about.bib")
bib <- ReadBib("about.bib")

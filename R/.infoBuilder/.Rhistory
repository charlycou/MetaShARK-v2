}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File")
)
server <- function(input, output, session) {
output$out <- renderTable({
browser()
req(input$id)
input$id
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File")
)
server <- function(input, output, session) {
output$out <- renderTable({
browser()
req(input$id)
input$id
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File"),
tableOutput("out")
)
server <- function(input, output, session) {
output$out <- renderTable({})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File"),
tableOutput("out")
)
server <- function(input, output, session) {
output$out <- renderTable({
browser()
req(input$id)
input$id
})
}
shinyApp(ui, server)
input$id
input$id
input$id <- data.frame()
library(shiny)
ui <- fluidPage(
fileInput("id","File"),
tableOutput("out")
)
server <- function(input, output, session) {
outvar$tmp <- reactiveValues(
tmp = data.frame()
)
observeEvent(input$id,{
outvar$tmp <- input$id
})
output$out <- renderTable({
browser()
req(outvar$tmp)
outvar$id$name
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File"),
tableOutput("out")
)
server <- function(input, output, session) {
outvar <- reactiveValues(
tmp = data.frame()
)
observeEvent(input$id,{
outvar$tmp <- input$id
})
output$out <- renderTable({
browser()
req(outvar$tmp)
outvar$tmp$name
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fileInput("id","File"),
tableOutput("out")
)
server <- function(input, output, session) {
outvar <- reactiveValues(
tmp = data.frame()
)
observeEvent(input$id,{
outvar$tmp <- input$id
})
output$out <- renderTable({
browser()
req(outvar$tmp)
print("passed")
outvar$tmp$name
})
}
shinyApp(ui, server)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
input$add_data_files
input$add_data_files$files
selectedFiles
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
selectedFiles
typeof(selectedFiles)
is.data.frame(selectedFiles)
apply(selectedFiles, 1, print)
ls()
selectedFiles
selectedFiles
apply(selectedFiles, 1, print)
apply(selectedFiles, 1, catt)
apply(selectedFiles, 1, cat)
apply(selectedFiles, 1, function(x) cat(x,"\n"))
colnames(selectedFiles)
selectedFiles$name
selectedFiles$type
outvar
outvar$data_files
outvar$data_files <- NULL
ui <- shinyUI(bootstrapPage(
shinyFilesButton('files', 'File select', 'Please select a file', FALSE),
verbatimTextOutput('rawInputValue'),
verbatimTextOutput('filepaths')
))
server <- shinyServer(function(input, output) {
roots = c(wd='.')
shinyFileChoose(input, 'files', roots=roots, filetypes=c('', 'txt'))
output$rawInputValue <- renderPrint({str(input$files)})
output$filepaths <- renderPrint({parseFilePaths(roots, input$files)})
})
runApp(list(
ui=ui,
server=server
))
tibble::as.tibble(data.frame(c(1,2),c(2,5)))
tibble::as_tibble(data.frame(c(1,2),c(2,5)))
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
cc <- getVolumes("/")
cc
cc()
cc("/")
args(c)
args("c")
args("cc")
args(data.frame)
c
args(cc)
cc
rm(cc)
rm(list = ls())
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
input$`add_data_files-modal`
input$add_data_files
typeof(input$add_data_files)
is.tibble(input$add_data_files)
tibble::is.tibble(input$add_data_files)
tibble::is.tibble(outvar$data_files)
outvar$data_files
tibble::is.tibble(selectedFiles)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
outvar$data_files
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
colnames(outvar$data_files)
colnames(selectedFiles)
outvar$data_files
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
req(selectedFiles)
identical(outvar$data_files, data.frame())
selectedFiles
apply(selectedFiles, 1, cat)
dim(data.frame(1:3,1:3))
data.frame(1:3,1:3)
array(1:5)
data.frame(1:5)
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
outvar$data_files
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
outvar$data_files
outvar$data_files
filename
rbind(outvar$data_files,
selectedFiles[selectedFiles$name == filename,])
outvar$data_files
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
outvar$data_files
filename
filename
outvar$data_files
filename
selectedFiles
selectedFiles$name == filename
selectedFiles$name
filename %in% outvar$data_files$name
rbind(outvar$data_files,
selectedFiles[selectedFiles$name == filename,])
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
selectedFiles
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
input$select_data_files
outvar$data_files
runApp('main.R')
runApp('Softwares/Gits/MetaShARK/shinyApp/main.R')
builtEml
builtEml$dp_location
builtEml$dp_name
outvar$data_files
library(shiny); runApp('~/Documents/MetaShARK/shinyApp/main.R')
runApp('~/Documents/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
## Common UI elements ----
output$logo <- renderImage({
list(src="resources/pictures/MetaShARK_icon2.png",
contentType = "image/png",
width = "100px",
height = "50px")
},
deleteFile = FALSE)
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
0.1*session$clientData$output_image_width
session$clientData$output_image_width
session$clientData$output_image_width()
session$clientData$`output_edi-logo_height`
session$clientData$`output_edi-logo_width`
runApp('main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
?png
# Demo of clicking, hovering, brushing with imageOutput
# Note that coordinates are in pixels
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
}
# Only run these examples in interactive R sessions
if (interactive()) {
# A basic shiny app with a plotOutput
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("newplot", "New plot")
),
mainPanel(
plotOutput("plot")
)
)
),
server = function(input, output) {
output$plot <- renderPlot({
input$newplot
# Add a little noise to the cars data
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
# A demonstration of clicking, hovering, and brushing
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
}
png
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
# buildResources.R
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Imports
source("buildGuideline.R", chdir = TRUE)
source("buildIndex.R", chdir = TRUE)
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
names(systemGuideline)
names(docGuideline)
sub("^.*eml-(.*)$","\\1",names(docGuideline)
)
sub("^[0-9]+(.*)$","\\1",names(docGuideline))
sub("^[0-9]+_(.*)$","\\1",names(docGuideline))
browseURL("http://www.google.fr")
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
install.packages()
install.packages("bibtex")
library(bibtex)
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
runApp('~/Softwares/Gits/MetaShARK/shinyApp/main.R')
bibtex::do_read_bib("../modules/about/about.bib")
read.bib("../modules/about/about.bib")
bib.test <- read.bib("../modules/about/about.bib")
str(bib.test)
typeof(bib.test)
bib.test$gofair
wit <- toBibtex(citation("base"))
wit
wit <- citation("base")
wit
typeof(wit)
toBibtex(bib.test$Michener1997)
class(wit)
class(bib.test)
class(bib.test$Michener1997)
class(bib.test[1])
toBibtex(bib.test[1])
toBibtex(bib.test["Michener97"])
bib.test["Michener1997"]
toBibtex(bib.test["Michener1997"])
class(bib.tes)
class(bib.test)
library("knitr")
write_bib("base")
install.packages("citr")
tocite <- c("Michener1997","Ochoa2009")
library("citr");
sapply(tocite, md_cite, bib_file="../modules/about/about.bib")
md_cite("Ochoa2009","../modules/about/about.bib")
md_cite("Ochoa2009",bib_file = "../modules/about/about.bib")
unload(citr)
unload("citr")
unload("bibtex")
unload("knitr")
write.bibtex(c(citation("knitr"),
citation("knitcitations"),
citation("httr")))
install.packages("knitrcitations")
library(devtools)
install_github("cboettig/knitcitations")
library(knitcitations)
write.bibtex(c(citation("knitr"),
citation("knitcitations"),
citation("httr")))
write.bibtex(c(citation("knitr"),
citation("httr")))
fread("knitcitations.bib")
data.table::fread("knitcitations.bib")
unload("knitcitations")
uninstall("knitcitations")
remove.packages("knitcitations")
